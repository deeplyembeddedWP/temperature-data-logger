
temperature logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001be8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00001be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020064  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020064  2**0
                  CONTENTS
  4 .bss          00000070  20000064  00001c4c  00020064  2**2
                  ALLOC
  5 .stack        00010004  200000d4  00001cbc  00020064  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001c315  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002d96  00000000  00000000  0003c400  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009e23  00000000  00000000  0003f196  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009e0  00000000  00000000  00048fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a20  00000000  00000000  00049999  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003495c  00000000  00000000  0004a3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013a6d  00000000  00000000  0007ed15  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00118a73  00000000  00000000  00092782  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001d9c  00000000  00000000  001ab1f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 00 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	2d 08 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     -...............
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     184:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000064 	.word	0x20000064
     280:	00000000 	.word	0x00000000
     284:	00001be8 	.word	0x00001be8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00001be8 	.word	0x00001be8
     2c4:	20000068 	.word	0x20000068
     2c8:	00001be8 	.word	0x00001be8
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000004bd 	.word	0x000004bd
     2e0:	00001255 	.word	0x00001255

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
                *pDest++ = 0;
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
        main();
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
     344:	00001be8 	.word	0x00001be8
     348:	20000064 	.word	0x20000064
     34c:	20000064 	.word	0x20000064
     350:	200000d4 	.word	0x200000d4
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
     35c:	000012a1 	.word	0x000012a1
     360:	00001181 	.word	0x00001181

00000364 <UART_Sercom_2_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     364:	4b10      	ldr	r3, [pc, #64]	; (3a8 <UART_Sercom_2_PORT_init+0x44>)
     366:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     36a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     36e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     372:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     376:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     37a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     37e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     382:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     386:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     38a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     38e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     392:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     396:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     39a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     39e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3a2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     3a6:	4770      	bx	lr
     3a8:	41008000 	.word	0x41008000

000003ac <UART_Sercom_2_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3ac:	4b06      	ldr	r3, [pc, #24]	; (3c8 <UART_Sercom_2_CLOCK_init+0x1c>)
     3ae:	2240      	movs	r2, #64	; 0x40
     3b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     3b4:	2243      	movs	r2, #67	; 0x43
     3b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     3ba:	4a04      	ldr	r2, [pc, #16]	; (3cc <UART_Sercom_2_CLOCK_init+0x20>)
     3bc:	6993      	ldr	r3, [r2, #24]
     3be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     3c2:	6193      	str	r3, [r2, #24]
     3c4:	4770      	bx	lr
     3c6:	bf00      	nop
     3c8:	40001c00 	.word	0x40001c00
     3cc:	40000800 	.word	0x40000800

000003d0 <UART_Sercom_2_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void UART_Sercom_2_init(void)
{
     3d0:	b508      	push	{r3, lr}
	UART_Sercom_2_CLOCK_init();
     3d2:	4b05      	ldr	r3, [pc, #20]	; (3e8 <UART_Sercom_2_init+0x18>)
     3d4:	4798      	blx	r3
	usart_sync_init(&UART_Sercom_2, SERCOM2, (void *)NULL);
     3d6:	2200      	movs	r2, #0
     3d8:	4904      	ldr	r1, [pc, #16]	; (3ec <UART_Sercom_2_init+0x1c>)
     3da:	4805      	ldr	r0, [pc, #20]	; (3f0 <UART_Sercom_2_init+0x20>)
     3dc:	4b05      	ldr	r3, [pc, #20]	; (3f4 <UART_Sercom_2_init+0x24>)
     3de:	4798      	blx	r3
	UART_Sercom_2_PORT_init();
     3e0:	4b05      	ldr	r3, [pc, #20]	; (3f8 <UART_Sercom_2_init+0x28>)
     3e2:	4798      	blx	r3
     3e4:	bd08      	pop	{r3, pc}
     3e6:	bf00      	nop
     3e8:	000003ad 	.word	0x000003ad
     3ec:	41012000 	.word	0x41012000
     3f0:	20000094 	.word	0x20000094
     3f4:	000006d5 	.word	0x000006d5
     3f8:	00000365 	.word	0x00000365

000003fc <I2C_Sercom_3_PORT_init>:
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3fc:	4b16      	ldr	r3, [pc, #88]	; (458 <I2C_Sercom_3_PORT_init+0x5c>)
     3fe:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     402:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     406:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     40a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     40e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     412:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     416:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     41a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     41e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     422:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     426:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     42a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     42e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     432:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     436:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     43a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     43e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     442:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     446:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     44a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     44e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     452:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     456:	4770      	bx	lr
     458:	41008000 	.word	0x41008000

0000045c <I2C_Sercom_3_CLOCK_init>:
     45c:	4b06      	ldr	r3, [pc, #24]	; (478 <I2C_Sercom_3_CLOCK_init+0x1c>)
     45e:	2240      	movs	r2, #64	; 0x40
     460:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     464:	2243      	movs	r2, #67	; 0x43
     466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     46a:	4a04      	ldr	r2, [pc, #16]	; (47c <I2C_Sercom_3_CLOCK_init+0x20>)
     46c:	6993      	ldr	r3, [r2, #24]
     46e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     472:	6193      	str	r3, [r2, #24]
     474:	4770      	bx	lr
     476:	bf00      	nop
     478:	40001c00 	.word	0x40001c00
     47c:	40000800 	.word	0x40000800

00000480 <I2C_Sercom_3_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_Sercom_3_init(void)
{
     480:	b508      	push	{r3, lr}
	I2C_Sercom_3_CLOCK_init();
     482:	4b04      	ldr	r3, [pc, #16]	; (494 <I2C_Sercom_3_init+0x14>)
     484:	4798      	blx	r3
	i2c_m_sync_init(&I2C_Sercom_3, SERCOM3);
     486:	4904      	ldr	r1, [pc, #16]	; (498 <I2C_Sercom_3_init+0x18>)
     488:	4804      	ldr	r0, [pc, #16]	; (49c <I2C_Sercom_3_init+0x1c>)
     48a:	4b05      	ldr	r3, [pc, #20]	; (4a0 <I2C_Sercom_3_init+0x20>)
     48c:	4798      	blx	r3
	I2C_Sercom_3_PORT_init();
     48e:	4b05      	ldr	r3, [pc, #20]	; (4a4 <I2C_Sercom_3_init+0x24>)
     490:	4798      	blx	r3
     492:	bd08      	pop	{r3, pc}
     494:	0000045d 	.word	0x0000045d
     498:	41014000 	.word	0x41014000
     49c:	200000a0 	.word	0x200000a0
     4a0:	00000555 	.word	0x00000555
     4a4:	000003fd 	.word	0x000003fd

000004a8 <delay_driver_init>:
}

void delay_driver_init(void)
{
     4a8:	b508      	push	{r3, lr}
	delay_init(SysTick);
     4aa:	4802      	ldr	r0, [pc, #8]	; (4b4 <delay_driver_init+0xc>)
     4ac:	4b02      	ldr	r3, [pc, #8]	; (4b8 <delay_driver_init+0x10>)
     4ae:	4798      	blx	r3
     4b0:	bd08      	pop	{r3, pc}
     4b2:	bf00      	nop
     4b4:	e000e010 	.word	0xe000e010
     4b8:	000004e1 	.word	0x000004e1

000004bc <system_init>:
}

void system_init(void)
{
     4bc:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     4be:	4b04      	ldr	r3, [pc, #16]	; (4d0 <system_init+0x14>)
     4c0:	4798      	blx	r3
	init_mcu();

	UART_Sercom_2_init();
     4c2:	4b04      	ldr	r3, [pc, #16]	; (4d4 <system_init+0x18>)
     4c4:	4798      	blx	r3

	I2C_Sercom_3_init();
     4c6:	4b04      	ldr	r3, [pc, #16]	; (4d8 <system_init+0x1c>)
     4c8:	4798      	blx	r3

	delay_driver_init();
     4ca:	4b04      	ldr	r3, [pc, #16]	; (4dc <system_init+0x20>)
     4cc:	4798      	blx	r3
     4ce:	bd08      	pop	{r3, pc}
     4d0:	0000078d 	.word	0x0000078d
     4d4:	000003d1 	.word	0x000003d1
     4d8:	00000481 	.word	0x00000481
     4dc:	000004a9 	.word	0x000004a9

000004e0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     4e0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     4e2:	4b02      	ldr	r3, [pc, #8]	; (4ec <delay_init+0xc>)
     4e4:	6018      	str	r0, [r3, #0]
     4e6:	4b02      	ldr	r3, [pc, #8]	; (4f0 <delay_init+0x10>)
     4e8:	4798      	blx	r3
     4ea:	bd08      	pop	{r3, pc}
     4ec:	20000080 	.word	0x20000080
     4f0:	00001175 	.word	0x00001175

000004f4 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     4f4:	b510      	push	{r4, lr}
     4f6:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     4f8:	8903      	ldrh	r3, [r0, #8]
     4fa:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     4fe:	4614      	mov	r4, r2
     500:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     506:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     50a:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     50c:	a901      	add	r1, sp, #4
     50e:	3814      	subs	r0, #20
     510:	4b03      	ldr	r3, [pc, #12]	; (520 <i2c_m_sync_write+0x2c>)
     512:	4798      	blx	r3

	if (ret) {
     514:	b910      	cbnz	r0, 51c <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
     516:	4620      	mov	r0, r4
     518:	b004      	add	sp, #16
     51a:	bd10      	pop	{r4, pc}
		return ret;
     51c:	4604      	mov	r4, r0
     51e:	e7fa      	b.n	516 <i2c_m_sync_write+0x22>
     520:	00000eb1 	.word	0x00000eb1

00000524 <i2c_m_sync_read>:
{
     524:	b510      	push	{r4, lr}
     526:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     528:	8903      	ldrh	r3, [r0, #8]
     52a:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     52e:	4614      	mov	r4, r2
     530:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     532:	f248 0301 	movw	r3, #32769	; 0x8001
     536:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     53a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     53c:	a901      	add	r1, sp, #4
     53e:	3814      	subs	r0, #20
     540:	4b03      	ldr	r3, [pc, #12]	; (550 <i2c_m_sync_read+0x2c>)
     542:	4798      	blx	r3
	if (ret) {
     544:	b910      	cbnz	r0, 54c <i2c_m_sync_read+0x28>
}
     546:	4620      	mov	r0, r4
     548:	b004      	add	sp, #16
     54a:	bd10      	pop	{r4, pc}
		return ret;
     54c:	4604      	mov	r4, r0
     54e:	e7fa      	b.n	546 <i2c_m_sync_read+0x22>
     550:	00000eb1 	.word	0x00000eb1

00000554 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     554:	b538      	push	{r3, r4, r5, lr}
     556:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     558:	4604      	mov	r4, r0
     55a:	225e      	movs	r2, #94	; 0x5e
     55c:	4908      	ldr	r1, [pc, #32]	; (580 <i2c_m_sync_init+0x2c>)
     55e:	3000      	adds	r0, #0
     560:	bf18      	it	ne
     562:	2001      	movne	r0, #1
     564:	4b07      	ldr	r3, [pc, #28]	; (584 <i2c_m_sync_init+0x30>)
     566:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     568:	4629      	mov	r1, r5
     56a:	4620      	mov	r0, r4
     56c:	4b06      	ldr	r3, [pc, #24]	; (588 <i2c_m_sync_init+0x34>)
     56e:	4798      	blx	r3
	if (init_status) {
     570:	4603      	mov	r3, r0
     572:	b918      	cbnz	r0, 57c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     574:	4a05      	ldr	r2, [pc, #20]	; (58c <i2c_m_sync_init+0x38>)
     576:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     578:	4a05      	ldr	r2, [pc, #20]	; (590 <i2c_m_sync_init+0x3c>)
     57a:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
     57c:	4618      	mov	r0, r3
     57e:	bd38      	pop	{r3, r4, r5, pc}
     580:	00001a68 	.word	0x00001a68
     584:	0000074d 	.word	0x0000074d
     588:	00000e09 	.word	0x00000e09
     58c:	00000525 	.word	0x00000525
     590:	000004f5 	.word	0x000004f5

00000594 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     594:	b508      	push	{r3, lr}
	return _i2c_m_sync_enable(&i2c->device);
     596:	4b01      	ldr	r3, [pc, #4]	; (59c <i2c_m_sync_enable+0x8>)
     598:	4798      	blx	r3
}
     59a:	bd08      	pop	{r3, pc}
     59c:	00000e39 	.word	0x00000e39

000005a0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     5a0:	b570      	push	{r4, r5, r6, lr}
     5a2:	460d      	mov	r5, r1
     5a4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     5a6:	4604      	mov	r4, r0
     5a8:	b168      	cbz	r0, 5c6 <io_write+0x26>
     5aa:	b151      	cbz	r1, 5c2 <io_write+0x22>
     5ac:	2001      	movs	r0, #1
     5ae:	2234      	movs	r2, #52	; 0x34
     5b0:	4906      	ldr	r1, [pc, #24]	; (5cc <io_write+0x2c>)
     5b2:	4b07      	ldr	r3, [pc, #28]	; (5d0 <io_write+0x30>)
     5b4:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     5b6:	6823      	ldr	r3, [r4, #0]
     5b8:	4632      	mov	r2, r6
     5ba:	4629      	mov	r1, r5
     5bc:	4620      	mov	r0, r4
     5be:	4798      	blx	r3
}
     5c0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     5c2:	2000      	movs	r0, #0
     5c4:	e7f3      	b.n	5ae <io_write+0xe>
     5c6:	2000      	movs	r0, #0
     5c8:	e7f1      	b.n	5ae <io_write+0xe>
     5ca:	bf00      	nop
     5cc:	00001a84 	.word	0x00001a84
     5d0:	0000074d 	.word	0x0000074d

000005d4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     5d4:	b570      	push	{r4, r5, r6, lr}
     5d6:	460d      	mov	r5, r1
     5d8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     5da:	4604      	mov	r4, r0
     5dc:	b168      	cbz	r0, 5fa <io_read+0x26>
     5de:	b151      	cbz	r1, 5f6 <io_read+0x22>
     5e0:	2001      	movs	r0, #1
     5e2:	223d      	movs	r2, #61	; 0x3d
     5e4:	4906      	ldr	r1, [pc, #24]	; (600 <io_read+0x2c>)
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <io_read+0x30>)
     5e8:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     5ea:	6863      	ldr	r3, [r4, #4]
     5ec:	4632      	mov	r2, r6
     5ee:	4629      	mov	r1, r5
     5f0:	4620      	mov	r0, r4
     5f2:	4798      	blx	r3
}
     5f4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     5f6:	2000      	movs	r0, #0
     5f8:	e7f3      	b.n	5e2 <io_read+0xe>
     5fa:	2000      	movs	r0, #0
     5fc:	e7f1      	b.n	5e2 <io_read+0xe>
     5fe:	bf00      	nop
     600:	00001a84 	.word	0x00001a84
     604:	0000074d 	.word	0x0000074d

00000608 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     60a:	460e      	mov	r6, r1
     60c:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     60e:	4605      	mov	r5, r0
     610:	b308      	cbz	r0, 656 <usart_sync_write+0x4e>
     612:	b311      	cbz	r1, 65a <usart_sync_write+0x52>
     614:	bb1a      	cbnz	r2, 65e <usart_sync_write+0x56>
     616:	2000      	movs	r0, #0
     618:	22f1      	movs	r2, #241	; 0xf1
     61a:	4912      	ldr	r1, [pc, #72]	; (664 <usart_sync_write+0x5c>)
     61c:	4b12      	ldr	r3, [pc, #72]	; (668 <usart_sync_write+0x60>)
     61e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     620:	f105 0408 	add.w	r4, r5, #8
     624:	4620      	mov	r0, r4
     626:	4b11      	ldr	r3, [pc, #68]	; (66c <usart_sync_write+0x64>)
     628:	4798      	blx	r3
     62a:	2800      	cmp	r0, #0
     62c:	d0f8      	beq.n	620 <usart_sync_write+0x18>
     62e:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     630:	5d71      	ldrb	r1, [r6, r5]
     632:	4620      	mov	r0, r4
     634:	4b0e      	ldr	r3, [pc, #56]	; (670 <usart_sync_write+0x68>)
     636:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     638:	4620      	mov	r0, r4
     63a:	4b0c      	ldr	r3, [pc, #48]	; (66c <usart_sync_write+0x64>)
     63c:	4798      	blx	r3
     63e:	2800      	cmp	r0, #0
     640:	d0fa      	beq.n	638 <usart_sync_write+0x30>
			;
	} while (++offset < length);
     642:	3501      	adds	r5, #1
     644:	42bd      	cmp	r5, r7
     646:	d3f3      	bcc.n	630 <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
     648:	4620      	mov	r0, r4
     64a:	4b0a      	ldr	r3, [pc, #40]	; (674 <usart_sync_write+0x6c>)
     64c:	4798      	blx	r3
     64e:	2800      	cmp	r0, #0
     650:	d0fa      	beq.n	648 <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
     652:	4628      	mov	r0, r5
     654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     656:	2000      	movs	r0, #0
     658:	e7de      	b.n	618 <usart_sync_write+0x10>
     65a:	2000      	movs	r0, #0
     65c:	e7dc      	b.n	618 <usart_sync_write+0x10>
     65e:	2001      	movs	r0, #1
     660:	e7da      	b.n	618 <usart_sync_write+0x10>
     662:	bf00      	nop
     664:	00001a98 	.word	0x00001a98
     668:	0000074d 	.word	0x0000074d
     66c:	00000deb 	.word	0x00000deb
     670:	00000ddd 	.word	0x00000ddd
     674:	00000df5 	.word	0x00000df5

00000678 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     67c:	460f      	mov	r7, r1
     67e:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     680:	4605      	mov	r5, r0
     682:	b1c8      	cbz	r0, 6b8 <usart_sync_read+0x40>
     684:	b1d1      	cbz	r1, 6bc <usart_sync_read+0x44>
     686:	b9da      	cbnz	r2, 6c0 <usart_sync_read+0x48>
     688:	2000      	movs	r0, #0
     68a:	f44f 7286 	mov.w	r2, #268	; 0x10c
     68e:	490d      	ldr	r1, [pc, #52]	; (6c4 <usart_sync_read+0x4c>)
     690:	4b0d      	ldr	r3, [pc, #52]	; (6c8 <usart_sync_read+0x50>)
     692:	4798      	blx	r3
	uint32_t                      offset = 0;
     694:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     696:	f105 0408 	add.w	r4, r5, #8
     69a:	4620      	mov	r0, r4
     69c:	4b0b      	ldr	r3, [pc, #44]	; (6cc <usart_sync_read+0x54>)
     69e:	4798      	blx	r3
     6a0:	2800      	cmp	r0, #0
     6a2:	d0f8      	beq.n	696 <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     6a4:	4620      	mov	r0, r4
     6a6:	4b0a      	ldr	r3, [pc, #40]	; (6d0 <usart_sync_read+0x58>)
     6a8:	4798      	blx	r3
     6aa:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     6ac:	3601      	adds	r6, #1
     6ae:	4546      	cmp	r6, r8
     6b0:	d3f1      	bcc.n	696 <usart_sync_read+0x1e>

	return (int32_t)offset;
}
     6b2:	4630      	mov	r0, r6
     6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
     6b8:	2000      	movs	r0, #0
     6ba:	e7e6      	b.n	68a <usart_sync_read+0x12>
     6bc:	2000      	movs	r0, #0
     6be:	e7e4      	b.n	68a <usart_sync_read+0x12>
     6c0:	2001      	movs	r0, #1
     6c2:	e7e2      	b.n	68a <usart_sync_read+0x12>
     6c4:	00001a98 	.word	0x00001a98
     6c8:	0000074d 	.word	0x0000074d
     6cc:	00000dff 	.word	0x00000dff
     6d0:	00000de3 	.word	0x00000de3

000006d4 <usart_sync_init>:
{
     6d4:	b538      	push	{r3, r4, r5, lr}
     6d6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     6d8:	4604      	mov	r4, r0
     6da:	b1a0      	cbz	r0, 706 <usart_sync_init+0x32>
     6dc:	b189      	cbz	r1, 702 <usart_sync_init+0x2e>
     6de:	2001      	movs	r0, #1
     6e0:	2234      	movs	r2, #52	; 0x34
     6e2:	490a      	ldr	r1, [pc, #40]	; (70c <usart_sync_init+0x38>)
     6e4:	4b0a      	ldr	r3, [pc, #40]	; (710 <usart_sync_init+0x3c>)
     6e6:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     6e8:	4629      	mov	r1, r5
     6ea:	f104 0008 	add.w	r0, r4, #8
     6ee:	4b09      	ldr	r3, [pc, #36]	; (714 <usart_sync_init+0x40>)
     6f0:	4798      	blx	r3
	if (init_status) {
     6f2:	4603      	mov	r3, r0
     6f4:	b918      	cbnz	r0, 6fe <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
     6f6:	4a08      	ldr	r2, [pc, #32]	; (718 <usart_sync_init+0x44>)
     6f8:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     6fa:	4a08      	ldr	r2, [pc, #32]	; (71c <usart_sync_init+0x48>)
     6fc:	6022      	str	r2, [r4, #0]
}
     6fe:	4618      	mov	r0, r3
     700:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     702:	2000      	movs	r0, #0
     704:	e7ec      	b.n	6e0 <usart_sync_init+0xc>
     706:	2000      	movs	r0, #0
     708:	e7ea      	b.n	6e0 <usart_sync_init+0xc>
     70a:	bf00      	nop
     70c:	00001a98 	.word	0x00001a98
     710:	0000074d 	.word	0x0000074d
     714:	00000d9d 	.word	0x00000d9d
     718:	00000679 	.word	0x00000679
     71c:	00000609 	.word	0x00000609

00000720 <usart_sync_enable>:
{
     720:	b510      	push	{r4, lr}
	ASSERT(descr);
     722:	4604      	mov	r4, r0
     724:	2253      	movs	r2, #83	; 0x53
     726:	4906      	ldr	r1, [pc, #24]	; (740 <usart_sync_enable+0x20>)
     728:	3000      	adds	r0, #0
     72a:	bf18      	it	ne
     72c:	2001      	movne	r0, #1
     72e:	4b05      	ldr	r3, [pc, #20]	; (744 <usart_sync_enable+0x24>)
     730:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     732:	f104 0008 	add.w	r0, r4, #8
     736:	4b04      	ldr	r3, [pc, #16]	; (748 <usart_sync_enable+0x28>)
     738:	4798      	blx	r3
}
     73a:	2000      	movs	r0, #0
     73c:	bd10      	pop	{r4, pc}
     73e:	bf00      	nop
     740:	00001a98 	.word	0x00001a98
     744:	0000074d 	.word	0x0000074d
     748:	00000dc9 	.word	0x00000dc9

0000074c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     74c:	b900      	cbnz	r0, 750 <assert+0x4>
		__asm("BKPT #0");
     74e:	be00      	bkpt	0x0000
     750:	4770      	bx	lr
	...

00000754 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     754:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     756:	4a06      	ldr	r2, [pc, #24]	; (770 <_sbrk+0x1c>)
     758:	6812      	ldr	r2, [r2, #0]
     75a:	b122      	cbz	r2, 766 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     75c:	4a04      	ldr	r2, [pc, #16]	; (770 <_sbrk+0x1c>)
     75e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     760:	4403      	add	r3, r0
     762:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     764:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     766:	4903      	ldr	r1, [pc, #12]	; (774 <_sbrk+0x20>)
     768:	4a01      	ldr	r2, [pc, #4]	; (770 <_sbrk+0x1c>)
     76a:	6011      	str	r1, [r2, #0]
     76c:	e7f6      	b.n	75c <_sbrk+0x8>
     76e:	bf00      	nop
     770:	20000084 	.word	0x20000084
     774:	200100d8 	.word	0x200100d8

00000778 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     778:	f04f 30ff 	mov.w	r0, #4294967295
     77c:	4770      	bx	lr

0000077e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     77e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     782:	604b      	str	r3, [r1, #4]

	return 0;
}
     784:	2000      	movs	r0, #0
     786:	4770      	bx	lr

00000788 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     788:	2000      	movs	r0, #0
     78a:	4770      	bx	lr

0000078c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     78c:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     78e:	4a08      	ldr	r2, [pc, #32]	; (7b0 <_init_chip+0x24>)
     790:	8813      	ldrh	r3, [r2, #0]
     792:	b29b      	uxth	r3, r3
     794:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     796:	4b07      	ldr	r3, [pc, #28]	; (7b4 <_init_chip+0x28>)
     798:	4798      	blx	r3
	_oscctrl_init_sources();
     79a:	4b07      	ldr	r3, [pc, #28]	; (7b8 <_init_chip+0x2c>)
     79c:	4798      	blx	r3
	_mclk_init();
     79e:	4b07      	ldr	r3, [pc, #28]	; (7bc <_init_chip+0x30>)
     7a0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     7a2:	4b07      	ldr	r3, [pc, #28]	; (7c0 <_init_chip+0x34>)
     7a4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     7a6:	f640 70ff 	movw	r0, #4095	; 0xfff
     7aa:	4b06      	ldr	r3, [pc, #24]	; (7c4 <_init_chip+0x38>)
     7ac:	4798      	blx	r3
     7ae:	bd08      	pop	{r3, pc}
     7b0:	41004000 	.word	0x41004000
     7b4:	000007f9 	.word	0x000007f9
     7b8:	0000080d 	.word	0x0000080d
     7bc:	000007ed 	.word	0x000007ed
     7c0:	00000829 	.word	0x00000829
     7c4:	000007c9 	.word	0x000007c9

000007c8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     7c8:	f010 0f01 	tst.w	r0, #1
     7cc:	d008      	beq.n	7e0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     7ce:	4a05      	ldr	r2, [pc, #20]	; (7e4 <_gclk_init_generators_by_fref+0x1c>)
     7d0:	4b05      	ldr	r3, [pc, #20]	; (7e8 <_gclk_init_generators_by_fref+0x20>)
     7d2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     7d4:	4b04      	ldr	r3, [pc, #16]	; (7e8 <_gclk_init_generators_by_fref+0x20>)
     7d6:	685a      	ldr	r2, [r3, #4]
     7d8:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     7dc:	421a      	tst	r2, r3
     7de:	d1f9      	bne.n	7d4 <_gclk_init_generators_by_fref+0xc>
     7e0:	4770      	bx	lr
     7e2:	bf00      	nop
     7e4:	00010101 	.word	0x00010101
     7e8:	40001c00 	.word	0x40001c00

000007ec <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     7ec:	2201      	movs	r2, #1
     7ee:	4b01      	ldr	r3, [pc, #4]	; (7f4 <_mclk_init+0x8>)
     7f0:	715a      	strb	r2, [r3, #5]
     7f2:	4770      	bx	lr
     7f4:	40000800 	.word	0x40000800

000007f8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     7f8:	4b03      	ldr	r3, [pc, #12]	; (808 <_osc32kctrl_init_sources+0x10>)
     7fa:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     7fc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     800:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     802:	2201      	movs	r2, #1
     804:	741a      	strb	r2, [r3, #16]
     806:	4770      	bx	lr
     808:	40001400 	.word	0x40001400

0000080c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     80c:	4a04      	ldr	r2, [pc, #16]	; (820 <_oscctrl_init_sources+0x14>)
     80e:	4b05      	ldr	r3, [pc, #20]	; (824 <_oscctrl_init_sources+0x18>)
     810:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     812:	4b04      	ldr	r3, [pc, #16]	; (824 <_oscctrl_init_sources+0x18>)
     814:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     816:	f013 0f02 	tst.w	r3, #2
     81a:	d0fa      	beq.n	812 <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     81c:	4770      	bx	lr
     81e:	bf00      	nop
     820:	03002606 	.word	0x03002606
     824:	40001000 	.word	0x40001000

00000828 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     828:	4770      	bx	lr
	...

0000082c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     82c:	b500      	push	{lr}
     82e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     830:	4b0d      	ldr	r3, [pc, #52]	; (868 <RAMECC_Handler+0x3c>)
     832:	789b      	ldrb	r3, [r3, #2]
     834:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     836:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     838:	9b01      	ldr	r3, [sp, #4]
     83a:	f013 0f02 	tst.w	r3, #2
     83e:	d006      	beq.n	84e <RAMECC_Handler+0x22>
     840:	4b0a      	ldr	r3, [pc, #40]	; (86c <RAMECC_Handler+0x40>)
     842:	681b      	ldr	r3, [r3, #0]
     844:	b11b      	cbz	r3, 84e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     846:	4a08      	ldr	r2, [pc, #32]	; (868 <RAMECC_Handler+0x3c>)
     848:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     84a:	4798      	blx	r3
     84c:	e009      	b.n	862 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     84e:	9b01      	ldr	r3, [sp, #4]
     850:	f013 0f01 	tst.w	r3, #1
     854:	d005      	beq.n	862 <RAMECC_Handler+0x36>
     856:	4b05      	ldr	r3, [pc, #20]	; (86c <RAMECC_Handler+0x40>)
     858:	685b      	ldr	r3, [r3, #4]
     85a:	b113      	cbz	r3, 862 <RAMECC_Handler+0x36>
     85c:	4a02      	ldr	r2, [pc, #8]	; (868 <RAMECC_Handler+0x3c>)
     85e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     860:	4798      	blx	r3
	} else {
		return;
	}
}
     862:	b003      	add	sp, #12
     864:	f85d fb04 	ldr.w	pc, [sp], #4
     868:	41020000 	.word	0x41020000
     86c:	200000c0 	.word	0x200000c0

00000870 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     870:	b470      	push	{r4, r5, r6}
     872:	b089      	sub	sp, #36	; 0x24
     874:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     876:	466c      	mov	r4, sp
     878:	4d0c      	ldr	r5, [pc, #48]	; (8ac <_sercom_get_hardware_index+0x3c>)
     87a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     87c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     87e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     882:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     886:	2000      	movs	r0, #0
     888:	2807      	cmp	r0, #7
     88a:	d80a      	bhi.n	8a2 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     88c:	ab08      	add	r3, sp, #32
     88e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     892:	f853 3c20 	ldr.w	r3, [r3, #-32]
     896:	42b3      	cmp	r3, r6
     898:	d001      	beq.n	89e <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     89a:	3001      	adds	r0, #1
     89c:	e7f4      	b.n	888 <_sercom_get_hardware_index+0x18>
			return i;
     89e:	b2c0      	uxtb	r0, r0
     8a0:	e000      	b.n	8a4 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
     8a2:	2000      	movs	r0, #0
}
     8a4:	b009      	add	sp, #36	; 0x24
     8a6:	bc70      	pop	{r4, r5, r6}
     8a8:	4770      	bx	lr
     8aa:	bf00      	nop
     8ac:	00001ab4 	.word	0x00001ab4

000008b0 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     8b0:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     8b2:	4b0c      	ldr	r3, [pc, #48]	; (8e4 <_get_sercom_index+0x34>)
     8b4:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     8b6:	2300      	movs	r3, #0
     8b8:	b143      	cbz	r3, 8cc <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     8ba:	f240 2247 	movw	r2, #583	; 0x247
     8be:	490a      	ldr	r1, [pc, #40]	; (8e8 <_get_sercom_index+0x38>)
     8c0:	2000      	movs	r0, #0
     8c2:	4b0a      	ldr	r3, [pc, #40]	; (8ec <_get_sercom_index+0x3c>)
     8c4:	4798      	blx	r3
	return 0;
     8c6:	2300      	movs	r3, #0
}
     8c8:	4618      	mov	r0, r3
     8ca:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
     8cc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
     8d0:	00d1      	lsls	r1, r2, #3
     8d2:	4a07      	ldr	r2, [pc, #28]	; (8f0 <_get_sercom_index+0x40>)
     8d4:	440a      	add	r2, r1
     8d6:	f892 2020 	ldrb.w	r2, [r2, #32]
     8da:	4290      	cmp	r0, r2
     8dc:	d0f4      	beq.n	8c8 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     8de:	3301      	adds	r3, #1
     8e0:	b2db      	uxtb	r3, r3
     8e2:	e7e9      	b.n	8b8 <_get_sercom_index+0x8>
     8e4:	00000871 	.word	0x00000871
     8e8:	00001b28 	.word	0x00001b28
     8ec:	0000074d 	.word	0x0000074d
     8f0:	00001ab4 	.word	0x00001ab4

000008f4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     8f4:	b538      	push	{r3, r4, r5, lr}
     8f6:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
     8f8:	4b3c      	ldr	r3, [pc, #240]	; (9ec <_usart_init+0xf8>)
     8fa:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     8fc:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     8fe:	f013 0f01 	tst.w	r3, #1
     902:	d122      	bne.n	94a <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     904:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     908:	00da      	lsls	r2, r3, #3
     90a:	4b39      	ldr	r3, [pc, #228]	; (9f0 <_usart_init+0xfc>)
     90c:	4413      	add	r3, r2
     90e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     910:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     914:	69e3      	ldr	r3, [r4, #28]
     916:	f013 0f03 	tst.w	r3, #3
     91a:	d1fb      	bne.n	914 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     91c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     91e:	f013 0f02 	tst.w	r3, #2
     922:	d00b      	beq.n	93c <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     924:	6823      	ldr	r3, [r4, #0]
     926:	f023 0302 	bic.w	r3, r3, #2
     92a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     92c:	69e3      	ldr	r3, [r4, #28]
     92e:	f013 0f03 	tst.w	r3, #3
     932:	d1fb      	bne.n	92c <_usart_init+0x38>
     934:	69e3      	ldr	r3, [r4, #28]
     936:	f013 0f02 	tst.w	r3, #2
     93a:	d1fb      	bne.n	934 <_usart_init+0x40>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     93c:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     940:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     942:	69e3      	ldr	r3, [r4, #28]
     944:	f013 0f03 	tst.w	r3, #3
     948:	d1fb      	bne.n	942 <_usart_init+0x4e>
     94a:	69e3      	ldr	r3, [r4, #28]
     94c:	f013 0f01 	tst.w	r3, #1
     950:	d1fb      	bne.n	94a <_usart_init+0x56>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     952:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     956:	00da      	lsls	r2, r3, #3
     958:	4b25      	ldr	r3, [pc, #148]	; (9f0 <_usart_init+0xfc>)
     95a:	4413      	add	r3, r2
     95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     95e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     960:	69e3      	ldr	r3, [r4, #28]
     962:	f013 0f03 	tst.w	r3, #3
     966:	d1fb      	bne.n	960 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     968:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     96c:	00da      	lsls	r2, r3, #3
     96e:	4b20      	ldr	r3, [pc, #128]	; (9f0 <_usart_init+0xfc>)
     970:	4413      	add	r3, r2
     972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     974:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     976:	69e3      	ldr	r3, [r4, #28]
     978:	f013 0f1f 	tst.w	r3, #31
     97c:	d1fb      	bne.n	976 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     97e:	0042      	lsls	r2, r0, #1
     980:	4402      	add	r2, r0
     982:	00d1      	lsls	r1, r2, #3
     984:	4b1a      	ldr	r3, [pc, #104]	; (9f0 <_usart_init+0xfc>)
     986:	440b      	add	r3, r1
     988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     98a:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     98e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     992:	d10a      	bne.n	9aa <_usart_init+0xb6>
     994:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
     998:	d107      	bne.n	9aa <_usart_init+0xb6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     99a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     99e:	00da      	lsls	r2, r3, #3
     9a0:	4b13      	ldr	r3, [pc, #76]	; (9f0 <_usart_init+0xfc>)
     9a2:	4413      	add	r3, r2
     9a4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     9a6:	81a3      	strh	r3, [r4, #12]
     9a8:	e00f      	b.n	9ca <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     9aa:	0042      	lsls	r2, r0, #1
     9ac:	4402      	add	r2, r0
     9ae:	00d1      	lsls	r1, r2, #3
     9b0:	4b0f      	ldr	r3, [pc, #60]	; (9f0 <_usart_init+0xfc>)
     9b2:	440b      	add	r3, r1
     9b4:	8e19      	ldrh	r1, [r3, #48]	; 0x30
     9b6:	89a2      	ldrh	r2, [r4, #12]
     9b8:	f361 020c 	bfi	r2, r1, #0, #13
     9bc:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     9be:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
     9c2:	89a3      	ldrh	r3, [r4, #12]
     9c4:	f362 334f 	bfi	r3, r2, #13, #3
     9c8:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     9ca:	4a09      	ldr	r2, [pc, #36]	; (9f0 <_usart_init+0xfc>)
     9cc:	0043      	lsls	r3, r0, #1
     9ce:	181d      	adds	r5, r3, r0
     9d0:	00e9      	lsls	r1, r5, #3
     9d2:	460d      	mov	r5, r1
     9d4:	4411      	add	r1, r2
     9d6:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     9da:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     9dc:	442a      	add	r2, r5
     9de:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     9e2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
     9e6:	2000      	movs	r0, #0
     9e8:	bd38      	pop	{r3, r4, r5, pc}
     9ea:	bf00      	nop
     9ec:	000008b1 	.word	0x000008b1
     9f0:	00001ab4 	.word	0x00001ab4

000009f4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
     9f4:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     9f6:	4b0d      	ldr	r3, [pc, #52]	; (a2c <_get_i2cm_index+0x38>)
     9f8:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     9fa:	2300      	movs	r3, #0
     9fc:	b143      	cbz	r3, a10 <_get_i2cm_index+0x1c>
		if (_i2cms[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     9fe:	f240 32a6 	movw	r2, #934	; 0x3a6
     a02:	490b      	ldr	r1, [pc, #44]	; (a30 <_get_i2cm_index+0x3c>)
     a04:	2000      	movs	r0, #0
     a06:	4b0b      	ldr	r3, [pc, #44]	; (a34 <_get_i2cm_index+0x40>)
     a08:	4798      	blx	r3
	return -1;
     a0a:	f04f 30ff 	mov.w	r0, #4294967295
}
     a0e:	bd08      	pop	{r3, pc}
		if (_i2cms[i].number == sercom_offset) {
     a10:	eb03 0243 	add.w	r2, r3, r3, lsl #1
     a14:	00d1      	lsls	r1, r2, #3
     a16:	4a08      	ldr	r2, [pc, #32]	; (a38 <_get_i2cm_index+0x44>)
     a18:	440a      	add	r2, r1
     a1a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
     a1e:	4290      	cmp	r0, r2
     a20:	d002      	beq.n	a28 <_get_i2cm_index+0x34>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     a22:	3301      	adds	r3, #1
     a24:	b2db      	uxtb	r3, r3
     a26:	e7e9      	b.n	9fc <_get_i2cm_index+0x8>
			return i;
     a28:	b258      	sxtb	r0, r3
     a2a:	bd08      	pop	{r3, pc}
     a2c:	00000871 	.word	0x00000871
     a30:	00001b28 	.word	0x00001b28
     a34:	0000074d 	.word	0x0000074d
     a38:	00001ab4 	.word	0x00001ab4

00000a3c <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
     a3c:	b538      	push	{r3, r4, r5, lr}
     a3e:	4605      	mov	r5, r0
     a40:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     a42:	4608      	mov	r0, r1
     a44:	4b33      	ldr	r3, [pc, #204]	; (b14 <_i2c_m_sync_init_impl+0xd8>)
     a46:	4798      	blx	r3
     a48:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     a4a:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     a4c:	f013 0f01 	tst.w	r3, #1
     a50:	d122      	bne.n	a98 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     a52:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     a56:	00da      	lsls	r2, r3, #3
     a58:	4b2f      	ldr	r3, [pc, #188]	; (b18 <_i2c_m_sync_init_impl+0xdc>)
     a5a:	4413      	add	r3, r2
     a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
     a5e:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     a62:	69e3      	ldr	r3, [r4, #28]
     a64:	f013 0f03 	tst.w	r3, #3
     a68:	d1fb      	bne.n	a62 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     a6a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     a6c:	f013 0f02 	tst.w	r3, #2
     a70:	d00b      	beq.n	a8a <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     a72:	6823      	ldr	r3, [r4, #0]
     a74:	f023 0302 	bic.w	r3, r3, #2
     a78:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     a7a:	69e3      	ldr	r3, [r4, #28]
     a7c:	f013 0f03 	tst.w	r3, #3
     a80:	d1fb      	bne.n	a7a <_i2c_m_sync_init_impl+0x3e>
     a82:	69e3      	ldr	r3, [r4, #28]
     a84:	f013 0f02 	tst.w	r3, #2
     a88:	d1fb      	bne.n	a82 <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     a8a:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     a8e:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     a90:	69e3      	ldr	r3, [r4, #28]
     a92:	f013 0f03 	tst.w	r3, #3
     a96:	d1fb      	bne.n	a90 <_i2c_m_sync_init_impl+0x54>
     a98:	69e3      	ldr	r3, [r4, #28]
     a9a:	f013 0f01 	tst.w	r3, #1
     a9e:	d1fb      	bne.n	a98 <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     aa0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     aa4:	00da      	lsls	r2, r3, #3
     aa6:	4b1c      	ldr	r3, [pc, #112]	; (b18 <_i2c_m_sync_init_impl+0xdc>)
     aa8:	4413      	add	r3, r2
     aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     aac:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     aae:	69e3      	ldr	r3, [r4, #28]
     ab0:	f013 0f03 	tst.w	r3, #3
     ab4:	d1fb      	bne.n	aae <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     ab6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     aba:	00da      	lsls	r2, r3, #3
     abc:	4b16      	ldr	r3, [pc, #88]	; (b18 <_i2c_m_sync_init_impl+0xdc>)
     abe:	4413      	add	r3, r2
     ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     ac2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ac4:	69e3      	ldr	r3, [r4, #28]
     ac6:	f013 0f04 	tst.w	r3, #4
     aca:	d1fb      	bne.n	ac4 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     acc:	0042      	lsls	r2, r0, #1
     ace:	4402      	add	r2, r0
     ad0:	00d1      	lsls	r1, r2, #3
     ad2:	4b11      	ldr	r3, [pc, #68]	; (b18 <_i2c_m_sync_init_impl+0xdc>)
     ad4:	440b      	add	r3, r1
     ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     ad8:	60e2      	str	r2, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     ada:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
     ade:	f003 0303 	and.w	r3, r3, #3
     ae2:	81ab      	strh	r3, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     ae4:	2b01      	cmp	r3, #1
     ae6:	bf94      	ite	ls
     ae8:	2300      	movls	r3, #0
     aea:	2301      	movhi	r3, #1
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     aec:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     aee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     af2:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     af6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     af8:	69e3      	ldr	r3, [r4, #28]
     afa:	f013 0f04 	tst.w	r3, #4
     afe:	d1fb      	bne.n	af8 <_i2c_m_sync_init_impl+0xbc>

	service->trise = _i2cms[i].trise;
     b00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     b04:	00c2      	lsls	r2, r0, #3
     b06:	4b04      	ldr	r3, [pc, #16]	; (b18 <_i2c_m_sync_init_impl+0xdc>)
     b08:	4413      	add	r3, r2
     b0a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
     b0e:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
     b10:	2000      	movs	r0, #0
     b12:	bd38      	pop	{r3, r4, r5, pc}
     b14:	000009f5 	.word	0x000009f5
     b18:	00001ab4 	.word	0x00001ab4

00000b1c <_sercom_i2c_sync_send_address>:
{
     b1c:	b570      	push	{r4, r5, r6, lr}
     b1e:	4605      	mov	r5, r0
	void *             hw    = i2c_dev->hw;
     b20:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     b22:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     b24:	f3c6 66c0 	ubfx	r6, r6, #27, #1
	ASSERT(i2c_dev);
     b28:	f240 52a5 	movw	r2, #1445	; 0x5a5
     b2c:	4999      	ldr	r1, [pc, #612]	; (d94 <_sercom_i2c_sync_send_address+0x278>)
     b2e:	3000      	adds	r0, #0
     b30:	bf18      	it	ne
     b32:	2001      	movne	r0, #1
     b34:	4b98      	ldr	r3, [pc, #608]	; (d98 <_sercom_i2c_sync_send_address+0x27c>)
     b36:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
     b38:	686b      	ldr	r3, [r5, #4]
     b3a:	2b01      	cmp	r3, #1
     b3c:	d057      	beq.n	bee <_sercom_i2c_sync_send_address+0xd2>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     b3e:	6863      	ldr	r3, [r4, #4]
     b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
     b44:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b46:	69e3      	ldr	r3, [r4, #28]
     b48:	f013 0f04 	tst.w	r3, #4
     b4c:	d1fb      	bne.n	b46 <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
     b4e:	882b      	ldrh	r3, [r5, #0]
     b50:	f413 6f80 	tst.w	r3, #1024	; 0x400
     b54:	d056      	beq.n	c04 <_sercom_i2c_sync_send_address+0xe8>
		if (msg->flags & I2C_M_RD) {
     b56:	886a      	ldrh	r2, [r5, #2]
     b58:	f012 0f01 	tst.w	r2, #1
     b5c:	d004      	beq.n	b68 <_sercom_i2c_sync_send_address+0x4c>
			msg->flags |= I2C_M_TEN;
     b5e:	886a      	ldrh	r2, [r5, #2]
     b60:	b292      	uxth	r2, r2
     b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     b66:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     b68:	f240 72fe 	movw	r2, #2046	; 0x7fe
     b6c:	ea02 0243 	and.w	r2, r2, r3, lsl #1
     b70:	69e3      	ldr	r3, [r4, #28]
     b72:	f013 0f04 	tst.w	r3, #4
     b76:	d1fb      	bne.n	b70 <_sercom_i2c_sync_send_address+0x54>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
     b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
     b7e:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     b84:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b86:	69e3      	ldr	r3, [r4, #28]
     b88:	f013 0f04 	tst.w	r3, #4
     b8c:	d1fb      	bne.n	b86 <_sercom_i2c_sync_send_address+0x6a>
	void *   hw      = i2c_dev->hw;
     b8e:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
     b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     b94:	7e33      	ldrb	r3, [r6, #24]
     b96:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
     b98:	4618      	mov	r0, r3
		if (timeout-- == 0) {
     b9a:	1e51      	subs	r1, r2, #1
     b9c:	b11a      	cbz	r2, ba6 <_sercom_i2c_sync_send_address+0x8a>
     b9e:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     ba0:	f013 0f03 	tst.w	r3, #3
     ba4:	d0f6      	beq.n	b94 <_sercom_i2c_sync_send_address+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     ba6:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     ba8:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bac:	69e3      	ldr	r3, [r4, #28]
     bae:	f013 0f04 	tst.w	r3, #4
     bb2:	d1fb      	bne.n	bac <_sercom_i2c_sync_send_address+0x90>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     bb4:	8b63      	ldrh	r3, [r4, #26]
     bb6:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
     bb8:	f010 0f01 	tst.w	r0, #1
     bbc:	f000 809c 	beq.w	cf8 <_sercom_i2c_sync_send_address+0x1dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     bc0:	f013 0f02 	tst.w	r3, #2
     bc4:	d032      	beq.n	c2c <_sercom_i2c_sync_send_address+0x110>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     bc6:	2201      	movs	r2, #1
     bc8:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
     bca:	886a      	ldrh	r2, [r5, #2]
     bcc:	b292      	uxth	r2, r2
     bce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
     bd2:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     bd4:	886a      	ldrh	r2, [r5, #2]
     bd6:	b292      	uxth	r2, r2
     bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     bdc:	b292      	uxth	r2, r2
     bde:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     be0:	f013 0f01 	tst.w	r3, #1
     be4:	f000 80d1 	beq.w	d8a <_sercom_i2c_sync_send_address+0x26e>
				return I2C_ERR_BUS;
     be8:	f06f 0004 	mvn.w	r0, #4
     bec:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->len == 1 && sclsm) {
     bee:	2e00      	cmp	r6, #0
     bf0:	d0a5      	beq.n	b3e <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     bf2:	6863      	ldr	r3, [r4, #4]
     bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     bf8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bfa:	69e3      	ldr	r3, [r4, #28]
     bfc:	f013 0f04 	tst.w	r3, #4
     c00:	d1fb      	bne.n	bfa <_sercom_i2c_sync_send_address+0xde>
     c02:	e7a4      	b.n	b4e <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
     c04:	005b      	lsls	r3, r3, #1
     c06:	b2db      	uxtb	r3, r3
     c08:	886a      	ldrh	r2, [r5, #2]
     c0a:	f002 0201 	and.w	r2, r2, #1
     c0e:	431a      	orrs	r2, r3
     c10:	69e3      	ldr	r3, [r4, #28]
     c12:	f013 0f04 	tst.w	r3, #4
     c16:	d1fb      	bne.n	c10 <_sercom_i2c_sync_send_address+0xf4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
     c1e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     c20:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c22:	69e3      	ldr	r3, [r4, #28]
     c24:	f013 0f04 	tst.w	r3, #4
     c28:	d1fb      	bne.n	c22 <_sercom_i2c_sync_send_address+0x106>
     c2a:	e7b0      	b.n	b8e <_sercom_i2c_sync_send_address+0x72>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     c2c:	f013 0f04 	tst.w	r3, #4
     c30:	d11f      	bne.n	c72 <_sercom_i2c_sync_send_address+0x156>
			if (msg->flags & I2C_M_TEN) {
     c32:	886b      	ldrh	r3, [r5, #2]
     c34:	f413 6f80 	tst.w	r3, #1024	; 0x400
     c38:	d039      	beq.n	cae <_sercom_i2c_sync_send_address+0x192>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     c3a:	882b      	ldrh	r3, [r5, #0]
     c3c:	121b      	asrs	r3, r3, #8
     c3e:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     c40:	f003 0206 	and.w	r2, r3, #6
     c44:	69e3      	ldr	r3, [r4, #28]
     c46:	f013 0f04 	tst.w	r3, #4
     c4a:	d1fb      	bne.n	c44 <_sercom_i2c_sync_send_address+0x128>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
     c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
     c52:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
     c54:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     c58:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c5a:	69e3      	ldr	r3, [r4, #28]
     c5c:	f013 0f04 	tst.w	r3, #4
     c60:	d1fb      	bne.n	c5a <_sercom_i2c_sync_send_address+0x13e>
				msg->flags &= ~I2C_M_TEN;
     c62:	886b      	ldrh	r3, [r5, #2]
     c64:	b29b      	uxth	r3, r3
     c66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
     c6a:	b29b      	uxth	r3, r3
     c6c:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
     c6e:	2000      	movs	r0, #0
     c70:	bd70      	pop	{r4, r5, r6, pc}
				if (msg->len > 0) {
     c72:	686b      	ldr	r3, [r5, #4]
     c74:	2b00      	cmp	r3, #0
     c76:	dd04      	ble.n	c82 <_sercom_i2c_sync_send_address+0x166>
					msg->flags |= I2C_M_FAIL;
     c78:	886b      	ldrh	r3, [r5, #2]
     c7a:	b29b      	uxth	r3, r3
     c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     c80:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     c82:	886b      	ldrh	r3, [r5, #2]
     c84:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     c88:	d108      	bne.n	c9c <_sercom_i2c_sync_send_address+0x180>
				msg->flags &= ~I2C_M_BUSY;
     c8a:	886b      	ldrh	r3, [r5, #2]
     c8c:	b29b      	uxth	r3, r3
     c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     c92:	b29b      	uxth	r3, r3
     c94:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     c96:	f06f 0001 	mvn.w	r0, #1
     c9a:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     c9c:	6863      	ldr	r3, [r4, #4]
     c9e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     ca2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ca4:	69e3      	ldr	r3, [r4, #28]
     ca6:	f013 0f04 	tst.w	r3, #4
     caa:	d1fb      	bne.n	ca4 <_sercom_i2c_sync_send_address+0x188>
     cac:	e7ed      	b.n	c8a <_sercom_i2c_sync_send_address+0x16e>
			if (msg->len == 0) {
     cae:	6868      	ldr	r0, [r5, #4]
     cb0:	b998      	cbnz	r0, cda <_sercom_i2c_sync_send_address+0x1be>
				if (msg->flags & I2C_M_STOP) {
     cb2:	886b      	ldrh	r3, [r5, #2]
     cb4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     cb8:	d106      	bne.n	cc8 <_sercom_i2c_sync_send_address+0x1ac>
				msg->flags &= ~I2C_M_BUSY;
     cba:	886b      	ldrh	r3, [r5, #2]
     cbc:	b29b      	uxth	r3, r3
     cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     cc2:	b29b      	uxth	r3, r3
     cc4:	806b      	strh	r3, [r5, #2]
     cc6:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     cc8:	6863      	ldr	r3, [r4, #4]
     cca:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     cce:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cd0:	69e3      	ldr	r3, [r4, #28]
     cd2:	f013 0f04 	tst.w	r3, #4
     cd6:	d1fb      	bne.n	cd0 <_sercom_i2c_sync_send_address+0x1b4>
     cd8:	e7ef      	b.n	cba <_sercom_i2c_sync_send_address+0x19e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     cda:	68ab      	ldr	r3, [r5, #8]
     cdc:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     cde:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ce0:	69e3      	ldr	r3, [r4, #28]
     ce2:	f013 0f04 	tst.w	r3, #4
     ce6:	d1fb      	bne.n	ce0 <_sercom_i2c_sync_send_address+0x1c4>
				msg->buffer++;
     ce8:	68ab      	ldr	r3, [r5, #8]
     cea:	3301      	adds	r3, #1
     cec:	60ab      	str	r3, [r5, #8]
				msg->len--;
     cee:	686b      	ldr	r3, [r5, #4]
     cf0:	3b01      	subs	r3, #1
     cf2:	606b      	str	r3, [r5, #4]
			return I2C_OK;
     cf4:	2000      	movs	r0, #0
     cf6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (flags & SB_FLAG) {
     cf8:	f010 0f02 	tst.w	r0, #2
     cfc:	d048      	beq.n	d90 <_sercom_i2c_sync_send_address+0x274>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     cfe:	6869      	ldr	r1, [r5, #4]
     d00:	2900      	cmp	r1, #0
     d02:	d03d      	beq.n	d80 <_sercom_i2c_sync_send_address+0x264>
     d04:	f013 0f04 	tst.w	r3, #4
     d08:	d13a      	bne.n	d80 <_sercom_i2c_sync_send_address+0x264>
			msg->len--;
     d0a:	3901      	subs	r1, #1
     d0c:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     d0e:	b901      	cbnz	r1, d12 <_sercom_i2c_sync_send_address+0x1f6>
     d10:	b1e2      	cbz	r2, d4c <_sercom_i2c_sync_send_address+0x230>
     d12:	2901      	cmp	r1, #1
     d14:	d018      	beq.n	d48 <_sercom_i2c_sync_send_address+0x22c>
			if (msg->len == 0) {
     d16:	686b      	ldr	r3, [r5, #4]
     d18:	b94b      	cbnz	r3, d2e <_sercom_i2c_sync_send_address+0x212>
				if (msg->flags & I2C_M_STOP) {
     d1a:	886b      	ldrh	r3, [r5, #2]
     d1c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     d20:	d11d      	bne.n	d5e <_sercom_i2c_sync_send_address+0x242>
				msg->flags &= ~I2C_M_BUSY;
     d22:	886b      	ldrh	r3, [r5, #2]
     d24:	b29b      	uxth	r3, r3
     d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     d2a:	b29b      	uxth	r3, r3
     d2c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     d2e:	68aa      	ldr	r2, [r5, #8]
     d30:	1c53      	adds	r3, r2, #1
     d32:	60ab      	str	r3, [r5, #8]
     d34:	69e3      	ldr	r3, [r4, #28]
     d36:	f013 0f04 	tst.w	r3, #4
     d3a:	d1fb      	bne.n	d34 <_sercom_i2c_sync_send_address+0x218>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     d3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d3e:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     d40:	2302      	movs	r3, #2
     d42:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
     d44:	2000      	movs	r0, #0
     d46:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     d48:	2a00      	cmp	r2, #0
     d4a:	d0e4      	beq.n	d16 <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     d4c:	6863      	ldr	r3, [r4, #4]
     d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     d52:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d54:	69e3      	ldr	r3, [r4, #28]
     d56:	f013 0f04 	tst.w	r3, #4
     d5a:	d1fb      	bne.n	d54 <_sercom_i2c_sync_send_address+0x238>
     d5c:	e7db      	b.n	d16 <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     d5e:	6863      	ldr	r3, [r4, #4]
     d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     d64:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d66:	69e3      	ldr	r3, [r4, #28]
     d68:	f013 0f04 	tst.w	r3, #4
     d6c:	d1fb      	bne.n	d66 <_sercom_i2c_sync_send_address+0x24a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     d6e:	6863      	ldr	r3, [r4, #4]
     d70:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     d74:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d76:	69e3      	ldr	r3, [r4, #28]
     d78:	f013 0f04 	tst.w	r3, #4
     d7c:	d1fb      	bne.n	d76 <_sercom_i2c_sync_send_address+0x25a>
     d7e:	e7d0      	b.n	d22 <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     d80:	2302      	movs	r3, #2
     d82:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
     d84:	f06f 0001 	mvn.w	r0, #1
     d88:	bd70      	pop	{r4, r5, r6, pc}
			return I2C_ERR_BAD_ADDRESS;
     d8a:	f06f 0003 	mvn.w	r0, #3
     d8e:	bd70      	pop	{r4, r5, r6, pc}
	return I2C_OK;
     d90:	2000      	movs	r0, #0
}
     d92:	bd70      	pop	{r4, r5, r6, pc}
     d94:	00001b28 	.word	0x00001b28
     d98:	0000074d 	.word	0x0000074d

00000d9c <_usart_sync_init>:
{
     d9c:	b538      	push	{r3, r4, r5, lr}
     d9e:	460c      	mov	r4, r1
	ASSERT(device);
     da0:	4605      	mov	r5, r0
     da2:	22bb      	movs	r2, #187	; 0xbb
     da4:	4905      	ldr	r1, [pc, #20]	; (dbc <_usart_sync_init+0x20>)
     da6:	3000      	adds	r0, #0
     da8:	bf18      	it	ne
     daa:	2001      	movne	r0, #1
     dac:	4b04      	ldr	r3, [pc, #16]	; (dc0 <_usart_sync_init+0x24>)
     dae:	4798      	blx	r3
	device->hw = hw;
     db0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     db2:	4620      	mov	r0, r4
     db4:	4b03      	ldr	r3, [pc, #12]	; (dc4 <_usart_sync_init+0x28>)
     db6:	4798      	blx	r3
}
     db8:	bd38      	pop	{r3, r4, r5, pc}
     dba:	bf00      	nop
     dbc:	00001b28 	.word	0x00001b28
     dc0:	0000074d 	.word	0x0000074d
     dc4:	000008f5 	.word	0x000008f5

00000dc8 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     dc8:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     dca:	6813      	ldr	r3, [r2, #0]
     dcc:	f043 0302 	orr.w	r3, r3, #2
     dd0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     dd2:	69d3      	ldr	r3, [r2, #28]
     dd4:	f013 0f03 	tst.w	r3, #3
     dd8:	d1fb      	bne.n	dd2 <_usart_sync_enable+0xa>
}
     dda:	4770      	bx	lr

00000ddc <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     ddc:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     dde:	6299      	str	r1, [r3, #40]	; 0x28
     de0:	4770      	bx	lr

00000de2 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     de2:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     de4:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     de6:	b2c0      	uxtb	r0, r0
     de8:	4770      	bx	lr

00000dea <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     dea:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     dec:	7e18      	ldrb	r0, [r3, #24]
}
     dee:	f000 0001 	and.w	r0, r0, #1
     df2:	4770      	bx	lr

00000df4 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     df4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     df6:	7e18      	ldrb	r0, [r3, #24]
}
     df8:	f3c0 0040 	ubfx	r0, r0, #1, #1
     dfc:	4770      	bx	lr

00000dfe <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     dfe:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     e00:	7e18      	ldrb	r0, [r3, #24]
}
     e02:	f3c0 0080 	ubfx	r0, r0, #2, #1
     e06:	4770      	bx	lr

00000e08 <_i2c_m_sync_init>:
{
     e08:	b538      	push	{r3, r4, r5, lr}
     e0a:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
     e0c:	4604      	mov	r4, r0
     e0e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
     e12:	4906      	ldr	r1, [pc, #24]	; (e2c <_i2c_m_sync_init+0x24>)
     e14:	3000      	adds	r0, #0
     e16:	bf18      	it	ne
     e18:	2001      	movne	r0, #1
     e1a:	4b05      	ldr	r3, [pc, #20]	; (e30 <_i2c_m_sync_init+0x28>)
     e1c:	4798      	blx	r3
	i2c_dev->hw = hw;
     e1e:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
     e20:	4629      	mov	r1, r5
     e22:	4620      	mov	r0, r4
     e24:	4b03      	ldr	r3, [pc, #12]	; (e34 <_i2c_m_sync_init+0x2c>)
     e26:	4798      	blx	r3
}
     e28:	bd38      	pop	{r3, r4, r5, pc}
     e2a:	bf00      	nop
     e2c:	00001b28 	.word	0x00001b28
     e30:	0000074d 	.word	0x0000074d
     e34:	00000a3d 	.word	0x00000a3d

00000e38 <_i2c_m_sync_enable>:
{
     e38:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
     e3a:	4e1b      	ldr	r6, [pc, #108]	; (ea8 <_i2c_m_sync_enable+0x70>)
     e3c:	4604      	mov	r4, r0
     e3e:	f240 5235 	movw	r2, #1333	; 0x535
     e42:	4631      	mov	r1, r6
     e44:	3000      	adds	r0, #0
     e46:	bf18      	it	ne
     e48:	2001      	movne	r0, #1
     e4a:	4d18      	ldr	r5, [pc, #96]	; (eac <_i2c_m_sync_enable+0x74>)
     e4c:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
     e4e:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
     e50:	f240 6205 	movw	r2, #1541	; 0x605
     e54:	4631      	mov	r1, r6
     e56:	1c20      	adds	r0, r4, #0
     e58:	bf18      	it	ne
     e5a:	2001      	movne	r0, #1
     e5c:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     e5e:	6823      	ldr	r3, [r4, #0]
     e60:	f043 0302 	orr.w	r3, r3, #2
     e64:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e66:	69e3      	ldr	r3, [r4, #28]
     e68:	f013 0f03 	tst.w	r3, #3
     e6c:	d1fb      	bne.n	e66 <_i2c_m_sync_enable+0x2e>
     e6e:	2104      	movs	r1, #4
     e70:	f64f 72ff 	movw	r2, #65535	; 0xffff
     e74:	69e3      	ldr	r3, [r4, #28]
     e76:	f013 0f04 	tst.w	r3, #4
     e7a:	d1fb      	bne.n	e74 <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     e7c:	8b63      	ldrh	r3, [r4, #26]
     e7e:	f3c3 1301 	ubfx	r3, r3, #4, #2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
     e82:	2b01      	cmp	r3, #1
     e84:	d00b      	beq.n	e9e <_i2c_m_sync_enable+0x66>
		timeout--;
     e86:	3a01      	subs	r2, #1
		if (timeout <= 0) {
     e88:	2a00      	cmp	r2, #0
     e8a:	dcf3      	bgt.n	e74 <_i2c_m_sync_enable+0x3c>
			if (--timeout_attempt)
     e8c:	3901      	subs	r1, #1
     e8e:	d008      	beq.n	ea2 <_i2c_m_sync_enable+0x6a>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     e90:	2310      	movs	r3, #16
     e92:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e94:	69e3      	ldr	r3, [r4, #28]
     e96:	f013 0f04 	tst.w	r3, #4
     e9a:	d1fb      	bne.n	e94 <_i2c_m_sync_enable+0x5c>
     e9c:	e7e8      	b.n	e70 <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
     e9e:	2000      	movs	r0, #0
     ea0:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
     ea2:	f06f 0005 	mvn.w	r0, #5
}
     ea6:	bd70      	pop	{r4, r5, r6, pc}
     ea8:	00001b28 	.word	0x00001b28
     eac:	0000074d 	.word	0x0000074d

00000eb0 <_i2c_m_sync_transfer>:
{
     eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     eb4:	4605      	mov	r5, r0
     eb6:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
     eb8:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
     eba:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 115c <_i2c_m_sync_transfer+0x2ac>
     ebe:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
     ec2:	4641      	mov	r1, r8
     ec4:	3000      	adds	r0, #0
     ec6:	bf18      	it	ne
     ec8:	2001      	movne	r0, #1
     eca:	4fa2      	ldr	r7, [pc, #648]	; (1154 <_i2c_m_sync_transfer+0x2a4>)
     ecc:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
     ece:	6928      	ldr	r0, [r5, #16]
     ed0:	f240 52d1 	movw	r2, #1489	; 0x5d1
     ed4:	4641      	mov	r1, r8
     ed6:	3000      	adds	r0, #0
     ed8:	bf18      	it	ne
     eda:	2001      	movne	r0, #1
     edc:	47b8      	blx	r7
	ASSERT(msg);
     ede:	f240 52d2 	movw	r2, #1490	; 0x5d2
     ee2:	4641      	mov	r1, r8
     ee4:	1c30      	adds	r0, r6, #0
     ee6:	bf18      	it	ne
     ee8:	2001      	movne	r0, #1
     eea:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     eec:	886b      	ldrh	r3, [r5, #2]
     eee:	f413 7f80 	tst.w	r3, #256	; 0x100
     ef2:	f040 812a 	bne.w	114a <_i2c_m_sync_transfer+0x29a>
	msg->flags |= I2C_M_BUSY;
     ef6:	8873      	ldrh	r3, [r6, #2]
     ef8:	b29b      	uxth	r3, r3
     efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     efe:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
     f00:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
     f04:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
     f08:	6863      	ldr	r3, [r4, #4]
     f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     f0e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f10:	69e3      	ldr	r3, [r4, #28]
     f12:	f013 0f04 	tst.w	r3, #4
     f16:	d1fb      	bne.n	f10 <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
     f18:	4628      	mov	r0, r5
     f1a:	4b8f      	ldr	r3, [pc, #572]	; (1158 <_i2c_m_sync_transfer+0x2a8>)
     f1c:	4798      	blx	r3
	if (ret) {
     f1e:	4603      	mov	r3, r0
     f20:	2800      	cmp	r0, #0
     f22:	f000 80b0 	beq.w	1086 <_i2c_m_sync_transfer+0x1d6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     f26:	886a      	ldrh	r2, [r5, #2]
     f28:	b292      	uxth	r2, r2
     f2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     f2e:	b292      	uxth	r2, r2
     f30:	806a      	strh	r2, [r5, #2]
		return ret;
     f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return I2C_ERR_BUS;
     f36:	f06f 0004 	mvn.w	r0, #4
     f3a:	e0b7      	b.n	10ac <_i2c_m_sync_transfer+0x1fc>
			if (msg->flags & I2C_M_STOP) {
     f3c:	8873      	ldrh	r3, [r6, #2]
     f3e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     f42:	d107      	bne.n	f54 <_i2c_m_sync_transfer+0xa4>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     f44:	886b      	ldrh	r3, [r5, #2]
     f46:	b29b      	uxth	r3, r3
     f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     f4c:	b29b      	uxth	r3, r3
     f4e:	806b      	strh	r3, [r5, #2]
			return ret;
     f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     f54:	6863      	ldr	r3, [r4, #4]
     f56:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     f5a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f5c:	69e3      	ldr	r3, [r4, #28]
     f5e:	f013 0f04 	tst.w	r3, #4
     f62:	d1fb      	bne.n	f5c <_i2c_m_sync_transfer+0xac>
     f64:	e7ee      	b.n	f44 <_i2c_m_sync_transfer+0x94>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     f66:	f013 0f04 	tst.w	r3, #4
     f6a:	d11f      	bne.n	fac <_i2c_m_sync_transfer+0xfc>
			if (msg->flags & I2C_M_TEN) {
     f6c:	886b      	ldrh	r3, [r5, #2]
     f6e:	f413 6f80 	tst.w	r3, #1024	; 0x400
     f72:	d039      	beq.n	fe8 <_i2c_m_sync_transfer+0x138>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     f74:	882b      	ldrh	r3, [r5, #0]
     f76:	121b      	asrs	r3, r3, #8
     f78:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     f7a:	f003 0206 	and.w	r2, r3, #6
     f7e:	69e3      	ldr	r3, [r4, #28]
     f80:	f013 0f04 	tst.w	r3, #4
     f84:	d1fb      	bne.n	f7e <_i2c_m_sync_transfer+0xce>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
     f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
     f8c:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
     f8e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     f92:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f94:	69e3      	ldr	r3, [r4, #28]
     f96:	f013 0f04 	tst.w	r3, #4
     f9a:	d1fb      	bne.n	f94 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_TEN;
     f9c:	886b      	ldrh	r3, [r5, #2]
     f9e:	b29b      	uxth	r3, r3
     fa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
     fa4:	b29b      	uxth	r3, r3
     fa6:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
     fa8:	2000      	movs	r0, #0
     faa:	e06b      	b.n	1084 <_i2c_m_sync_transfer+0x1d4>
				if (msg->len > 0) {
     fac:	686b      	ldr	r3, [r5, #4]
     fae:	2b00      	cmp	r3, #0
     fb0:	dd04      	ble.n	fbc <_i2c_m_sync_transfer+0x10c>
					msg->flags |= I2C_M_FAIL;
     fb2:	886b      	ldrh	r3, [r5, #2]
     fb4:	b29b      	uxth	r3, r3
     fb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     fba:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     fbc:	886b      	ldrh	r3, [r5, #2]
     fbe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     fc2:	d108      	bne.n	fd6 <_i2c_m_sync_transfer+0x126>
				msg->flags &= ~I2C_M_BUSY;
     fc4:	886b      	ldrh	r3, [r5, #2]
     fc6:	b29b      	uxth	r3, r3
     fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     fcc:	b29b      	uxth	r3, r3
     fce:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     fd0:	f06f 0001 	mvn.w	r0, #1
     fd4:	e056      	b.n	1084 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     fd6:	6863      	ldr	r3, [r4, #4]
     fd8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     fdc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     fde:	69e3      	ldr	r3, [r4, #28]
     fe0:	f013 0f04 	tst.w	r3, #4
     fe4:	d1fb      	bne.n	fde <_i2c_m_sync_transfer+0x12e>
     fe6:	e7ed      	b.n	fc4 <_i2c_m_sync_transfer+0x114>
			if (msg->len == 0) {
     fe8:	6868      	ldr	r0, [r5, #4]
     fea:	b998      	cbnz	r0, 1014 <_i2c_m_sync_transfer+0x164>
				if (msg->flags & I2C_M_STOP) {
     fec:	886b      	ldrh	r3, [r5, #2]
     fee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     ff2:	d106      	bne.n	1002 <_i2c_m_sync_transfer+0x152>
				msg->flags &= ~I2C_M_BUSY;
     ff4:	886b      	ldrh	r3, [r5, #2]
     ff6:	b29b      	uxth	r3, r3
     ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     ffc:	b29b      	uxth	r3, r3
     ffe:	806b      	strh	r3, [r5, #2]
    1000:	e040      	b.n	1084 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1002:	6863      	ldr	r3, [r4, #4]
    1004:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1008:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    100a:	69e3      	ldr	r3, [r4, #28]
    100c:	f013 0f04 	tst.w	r3, #4
    1010:	d1fb      	bne.n	100a <_i2c_m_sync_transfer+0x15a>
    1012:	e7ef      	b.n	ff4 <_i2c_m_sync_transfer+0x144>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1014:	68ab      	ldr	r3, [r5, #8]
    1016:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1018:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    101a:	69e3      	ldr	r3, [r4, #28]
    101c:	f013 0f04 	tst.w	r3, #4
    1020:	d1fb      	bne.n	101a <_i2c_m_sync_transfer+0x16a>
				msg->buffer++;
    1022:	68ab      	ldr	r3, [r5, #8]
    1024:	3301      	adds	r3, #1
    1026:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1028:	686b      	ldr	r3, [r5, #4]
    102a:	3b01      	subs	r3, #1
    102c:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    102e:	2000      	movs	r0, #0
    1030:	e028      	b.n	1084 <_i2c_m_sync_transfer+0x1d4>
	} else if (flags & SB_FLAG) {
    1032:	f017 0f02 	tst.w	r7, #2
    1036:	f000 8083 	beq.w	1140 <_i2c_m_sync_transfer+0x290>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    103a:	6869      	ldr	r1, [r5, #4]
    103c:	2900      	cmp	r1, #0
    103e:	d077      	beq.n	1130 <_i2c_m_sync_transfer+0x280>
    1040:	f013 0f04 	tst.w	r3, #4
    1044:	d174      	bne.n	1130 <_i2c_m_sync_transfer+0x280>
			msg->len--;
    1046:	3901      	subs	r1, #1
    1048:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    104a:	b909      	cbnz	r1, 1050 <_i2c_m_sync_transfer+0x1a0>
    104c:	2a00      	cmp	r2, #0
    104e:	d055      	beq.n	10fc <_i2c_m_sync_transfer+0x24c>
    1050:	2901      	cmp	r1, #1
    1052:	d051      	beq.n	10f8 <_i2c_m_sync_transfer+0x248>
			if (msg->len == 0) {
    1054:	686b      	ldr	r3, [r5, #4]
    1056:	b94b      	cbnz	r3, 106c <_i2c_m_sync_transfer+0x1bc>
				if (msg->flags & I2C_M_STOP) {
    1058:	886b      	ldrh	r3, [r5, #2]
    105a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    105e:	d156      	bne.n	110e <_i2c_m_sync_transfer+0x25e>
				msg->flags &= ~I2C_M_BUSY;
    1060:	886b      	ldrh	r3, [r5, #2]
    1062:	b29b      	uxth	r3, r3
    1064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1068:	b29b      	uxth	r3, r3
    106a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    106c:	68aa      	ldr	r2, [r5, #8]
    106e:	1c53      	adds	r3, r2, #1
    1070:	60ab      	str	r3, [r5, #8]
    1072:	69e3      	ldr	r3, [r4, #28]
    1074:	f013 0f04 	tst.w	r3, #4
    1078:	d1fb      	bne.n	1072 <_i2c_m_sync_transfer+0x1c2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    107a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    107c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    107e:	2302      	movs	r3, #2
    1080:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1082:	2000      	movs	r0, #0
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    1084:	4603      	mov	r3, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1086:	886a      	ldrh	r2, [r5, #2]
    1088:	f412 7f80 	tst.w	r2, #256	; 0x100
    108c:	d05a      	beq.n	1144 <_i2c_m_sync_transfer+0x294>
	void *   hw      = i2c_dev->hw;
    108e:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    1090:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1094:	7e03      	ldrb	r3, [r0, #24]
    1096:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1098:	461f      	mov	r7, r3
		if (timeout-- == 0) {
    109a:	1e51      	subs	r1, r2, #1
    109c:	2a00      	cmp	r2, #0
    109e:	f43f af4a 	beq.w	f36 <_i2c_m_sync_transfer+0x86>
    10a2:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    10a4:	f013 0f03 	tst.w	r3, #3
    10a8:	d0f4      	beq.n	1094 <_i2c_m_sync_transfer+0x1e4>
	return I2C_OK;
    10aa:	2000      	movs	r0, #0
		if (ret) {
    10ac:	2800      	cmp	r0, #0
    10ae:	f47f af45 	bne.w	f3c <_i2c_m_sync_transfer+0x8c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    10b2:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    10b4:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10b8:	69e3      	ldr	r3, [r4, #28]
    10ba:	f013 0f04 	tst.w	r3, #4
    10be:	d1fb      	bne.n	10b8 <_i2c_m_sync_transfer+0x208>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    10c0:	8b63      	ldrh	r3, [r4, #26]
    10c2:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    10c4:	f017 0f01 	tst.w	r7, #1
    10c8:	d0b3      	beq.n	1032 <_i2c_m_sync_transfer+0x182>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    10ca:	f013 0f02 	tst.w	r3, #2
    10ce:	f43f af4a 	beq.w	f66 <_i2c_m_sync_transfer+0xb6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    10d2:	2201      	movs	r2, #1
    10d4:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    10d6:	886a      	ldrh	r2, [r5, #2]
    10d8:	b292      	uxth	r2, r2
    10da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    10de:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    10e0:	886a      	ldrh	r2, [r5, #2]
    10e2:	b292      	uxth	r2, r2
    10e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    10e8:	b292      	uxth	r2, r2
    10ea:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    10ec:	f013 0f01 	tst.w	r3, #1
    10f0:	d023      	beq.n	113a <_i2c_m_sync_transfer+0x28a>
				return I2C_ERR_BUS;
    10f2:	f06f 0004 	mvn.w	r0, #4
    10f6:	e7c5      	b.n	1084 <_i2c_m_sync_transfer+0x1d4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    10f8:	2a00      	cmp	r2, #0
    10fa:	d0ab      	beq.n	1054 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    10fc:	6863      	ldr	r3, [r4, #4]
    10fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1102:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1104:	69e3      	ldr	r3, [r4, #28]
    1106:	f013 0f04 	tst.w	r3, #4
    110a:	d1fb      	bne.n	1104 <_i2c_m_sync_transfer+0x254>
    110c:	e7a2      	b.n	1054 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    110e:	6863      	ldr	r3, [r4, #4]
    1110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1114:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1116:	69e3      	ldr	r3, [r4, #28]
    1118:	f013 0f04 	tst.w	r3, #4
    111c:	d1fb      	bne.n	1116 <_i2c_m_sync_transfer+0x266>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    111e:	6863      	ldr	r3, [r4, #4]
    1120:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1124:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1126:	69e3      	ldr	r3, [r4, #28]
    1128:	f013 0f04 	tst.w	r3, #4
    112c:	d1fb      	bne.n	1126 <_i2c_m_sync_transfer+0x276>
    112e:	e797      	b.n	1060 <_i2c_m_sync_transfer+0x1b0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1130:	2302      	movs	r3, #2
    1132:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1134:	f06f 0001 	mvn.w	r0, #1
    1138:	e7a4      	b.n	1084 <_i2c_m_sync_transfer+0x1d4>
			return I2C_ERR_BAD_ADDRESS;
    113a:	f06f 0003 	mvn.w	r0, #3
    113e:	e7a1      	b.n	1084 <_i2c_m_sync_transfer+0x1d4>
	return I2C_OK;
    1140:	2000      	movs	r0, #0
    1142:	e79f      	b.n	1084 <_i2c_m_sync_transfer+0x1d4>
	return ret;
    1144:	4618      	mov	r0, r3
    1146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return I2C_ERR_BUSY;
    114a:	f06f 0005 	mvn.w	r0, #5
}
    114e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1152:	bf00      	nop
    1154:	0000074d 	.word	0x0000074d
    1158:	00000b1d 	.word	0x00000b1d
    115c:	00001b28 	.word	0x00001b28

00001160 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1160:	4b03      	ldr	r3, [pc, #12]	; (1170 <_system_time_init+0x10>)
    1162:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1166:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1168:	2205      	movs	r2, #5
    116a:	601a      	str	r2, [r3, #0]
    116c:	4770      	bx	lr
    116e:	bf00      	nop
    1170:	e000e010 	.word	0xe000e010

00001174 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1174:	b508      	push	{r3, lr}
	_system_time_init(hw);
    1176:	4b01      	ldr	r3, [pc, #4]	; (117c <_delay_init+0x8>)
    1178:	4798      	blx	r3
    117a:	bd08      	pop	{r3, pc}
    117c:	00001161 	.word	0x00001161

00001180 <main>:
#include <atmel_start.h>
#include "user_src/drivers/include/I2C.h"

int main(void)
{
    1180:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1182:	4b02      	ldr	r3, [pc, #8]	; (118c <main+0xc>)
    1184:	4798      	blx	r3
	I2C_begin();
    1186:	4b02      	ldr	r3, [pc, #8]	; (1190 <main+0x10>)
    1188:	4798      	blx	r3
    118a:	e7fe      	b.n	118a <main+0xa>
    118c:	000002d1 	.word	0x000002d1
    1190:	00001275 	.word	0x00001275

00001194 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    1194:	b958      	cbnz	r0, 11ae <_read+0x1a>
{
    1196:	b508      	push	{r3, lr}
    1198:	460b      	mov	r3, r1
    119a:	4611      	mov	r1, r2
    119c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    119e:	4b05      	ldr	r3, [pc, #20]	; (11b4 <_read+0x20>)
    11a0:	4798      	blx	r3
	if (n < 0) {
    11a2:	2800      	cmp	r0, #0
    11a4:	db00      	blt.n	11a8 <_read+0x14>
		return -1;
	}

	return n;
}
    11a6:	bd08      	pop	{r3, pc}
		return -1;
    11a8:	f04f 30ff 	mov.w	r0, #4294967295
    11ac:	bd08      	pop	{r3, pc}
		return -1;
    11ae:	f04f 30ff 	mov.w	r0, #4294967295
    11b2:	4770      	bx	lr
    11b4:	0000120d 	.word	0x0000120d

000011b8 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    11b8:	3801      	subs	r0, #1
    11ba:	2802      	cmp	r0, #2
    11bc:	d80b      	bhi.n	11d6 <_write+0x1e>
{
    11be:	b508      	push	{r3, lr}
    11c0:	460b      	mov	r3, r1
    11c2:	4611      	mov	r1, r2
    11c4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    11c6:	4b05      	ldr	r3, [pc, #20]	; (11dc <_write+0x24>)
    11c8:	4798      	blx	r3
	if (n < 0) {
    11ca:	2800      	cmp	r0, #0
    11cc:	db00      	blt.n	11d0 <_write+0x18>
		return -1;
	}

	return n;
}
    11ce:	bd08      	pop	{r3, pc}
		return -1;
    11d0:	f04f 30ff 	mov.w	r0, #4294967295
    11d4:	bd08      	pop	{r3, pc}
		return -1;
    11d6:	f04f 30ff 	mov.w	r0, #4294967295
    11da:	4770      	bx	lr
    11dc:	00001231 	.word	0x00001231

000011e0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    11e0:	b570      	push	{r4, r5, r6, lr}
    11e2:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    11e4:	4d06      	ldr	r5, [pc, #24]	; (1200 <stdio_io_init+0x20>)
    11e6:	682b      	ldr	r3, [r5, #0]
    11e8:	2100      	movs	r1, #0
    11ea:	6898      	ldr	r0, [r3, #8]
    11ec:	4c05      	ldr	r4, [pc, #20]	; (1204 <stdio_io_init+0x24>)
    11ee:	47a0      	blx	r4
	setbuf(stdin, NULL);
    11f0:	682b      	ldr	r3, [r5, #0]
    11f2:	2100      	movs	r1, #0
    11f4:	6858      	ldr	r0, [r3, #4]
    11f6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    11f8:	4b03      	ldr	r3, [pc, #12]	; (1208 <stdio_io_init+0x28>)
    11fa:	601e      	str	r6, [r3, #0]
    11fc:	bd70      	pop	{r4, r5, r6, pc}
    11fe:	bf00      	nop
    1200:	20000000 	.word	0x20000000
    1204:	000012f9 	.word	0x000012f9
    1208:	20000088 	.word	0x20000088

0000120c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    120c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    120e:	4b06      	ldr	r3, [pc, #24]	; (1228 <stdio_io_read+0x1c>)
    1210:	681b      	ldr	r3, [r3, #0]
    1212:	b133      	cbz	r3, 1222 <stdio_io_read+0x16>
    1214:	460a      	mov	r2, r1
    1216:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1218:	b292      	uxth	r2, r2
    121a:	4618      	mov	r0, r3
    121c:	4b03      	ldr	r3, [pc, #12]	; (122c <stdio_io_read+0x20>)
    121e:	4798      	blx	r3
    1220:	bd08      	pop	{r3, pc}
		return 0;
    1222:	2000      	movs	r0, #0
}
    1224:	bd08      	pop	{r3, pc}
    1226:	bf00      	nop
    1228:	20000088 	.word	0x20000088
    122c:	000005d5 	.word	0x000005d5

00001230 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1230:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    1232:	4b06      	ldr	r3, [pc, #24]	; (124c <stdio_io_write+0x1c>)
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	b133      	cbz	r3, 1246 <stdio_io_write+0x16>
    1238:	460a      	mov	r2, r1
    123a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    123c:	b292      	uxth	r2, r2
    123e:	4618      	mov	r0, r3
    1240:	4b03      	ldr	r3, [pc, #12]	; (1250 <stdio_io_write+0x20>)
    1242:	4798      	blx	r3
    1244:	bd08      	pop	{r3, pc}
		return 0;
    1246:	2000      	movs	r0, #0
}
    1248:	bd08      	pop	{r3, pc}
    124a:	bf00      	nop
    124c:	20000088 	.word	0x20000088
    1250:	000005a1 	.word	0x000005a1

00001254 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    1254:	b510      	push	{r4, lr}

	usart_sync_enable(&UART_Sercom_2);
    1256:	4c04      	ldr	r4, [pc, #16]	; (1268 <stdio_redirect_init+0x14>)
    1258:	4620      	mov	r0, r4
    125a:	4b04      	ldr	r3, [pc, #16]	; (126c <stdio_redirect_init+0x18>)
    125c:	4798      	blx	r3
	stdio_io_init(&UART_Sercom_2.io);
    125e:	4620      	mov	r0, r4
    1260:	4b03      	ldr	r3, [pc, #12]	; (1270 <stdio_redirect_init+0x1c>)
    1262:	4798      	blx	r3
    1264:	bd10      	pop	{r4, pc}
    1266:	bf00      	nop
    1268:	20000094 	.word	0x20000094
    126c:	00000721 	.word	0x00000721
    1270:	000011e1 	.word	0x000011e1

00001274 <I2C_begin>:
/**
 * @brief enables the i2c hardware on sercom-3
 *
 * @return 0 success, <0 error
 */
int I2C_begin(void) {
    1274:	b510      	push	{r4, lr}
  int err = i2c_m_sync_enable(&I2C_Sercom_3);
    1276:	4806      	ldr	r0, [pc, #24]	; (1290 <I2C_begin+0x1c>)
    1278:	4b06      	ldr	r3, [pc, #24]	; (1294 <I2C_begin+0x20>)
    127a:	4798      	blx	r3
  ASSERT(!err);
    127c:	4604      	mov	r4, r0
    127e:	221f      	movs	r2, #31
    1280:	4905      	ldr	r1, [pc, #20]	; (1298 <I2C_begin+0x24>)
    1282:	fab0 f080 	clz	r0, r0
    1286:	0940      	lsrs	r0, r0, #5
    1288:	4b04      	ldr	r3, [pc, #16]	; (129c <I2C_begin+0x28>)
    128a:	4798      	blx	r3

  return err;
}
    128c:	4620      	mov	r0, r4
    128e:	bd10      	pop	{r4, pc}
    1290:	200000a0 	.word	0x200000a0
    1294:	00000595 	.word	0x00000595
    1298:	00001b44 	.word	0x00001b44
    129c:	0000074d 	.word	0x0000074d

000012a0 <__libc_init_array>:
    12a0:	b570      	push	{r4, r5, r6, lr}
    12a2:	4e0d      	ldr	r6, [pc, #52]	; (12d8 <__libc_init_array+0x38>)
    12a4:	4c0d      	ldr	r4, [pc, #52]	; (12dc <__libc_init_array+0x3c>)
    12a6:	1ba4      	subs	r4, r4, r6
    12a8:	10a4      	asrs	r4, r4, #2
    12aa:	2500      	movs	r5, #0
    12ac:	42a5      	cmp	r5, r4
    12ae:	d109      	bne.n	12c4 <__libc_init_array+0x24>
    12b0:	4e0b      	ldr	r6, [pc, #44]	; (12e0 <__libc_init_array+0x40>)
    12b2:	4c0c      	ldr	r4, [pc, #48]	; (12e4 <__libc_init_array+0x44>)
    12b4:	f000 fc88 	bl	1bc8 <_init>
    12b8:	1ba4      	subs	r4, r4, r6
    12ba:	10a4      	asrs	r4, r4, #2
    12bc:	2500      	movs	r5, #0
    12be:	42a5      	cmp	r5, r4
    12c0:	d105      	bne.n	12ce <__libc_init_array+0x2e>
    12c2:	bd70      	pop	{r4, r5, r6, pc}
    12c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    12c8:	4798      	blx	r3
    12ca:	3501      	adds	r5, #1
    12cc:	e7ee      	b.n	12ac <__libc_init_array+0xc>
    12ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    12d2:	4798      	blx	r3
    12d4:	3501      	adds	r5, #1
    12d6:	e7f2      	b.n	12be <__libc_init_array+0x1e>
    12d8:	00001bd4 	.word	0x00001bd4
    12dc:	00001bd4 	.word	0x00001bd4
    12e0:	00001bd4 	.word	0x00001bd4
    12e4:	00001bd8 	.word	0x00001bd8

000012e8 <memset>:
    12e8:	4402      	add	r2, r0
    12ea:	4603      	mov	r3, r0
    12ec:	4293      	cmp	r3, r2
    12ee:	d100      	bne.n	12f2 <memset+0xa>
    12f0:	4770      	bx	lr
    12f2:	f803 1b01 	strb.w	r1, [r3], #1
    12f6:	e7f9      	b.n	12ec <memset+0x4>

000012f8 <setbuf>:
    12f8:	2900      	cmp	r1, #0
    12fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    12fe:	bf0c      	ite	eq
    1300:	2202      	moveq	r2, #2
    1302:	2200      	movne	r2, #0
    1304:	f000 b800 	b.w	1308 <setvbuf>

00001308 <setvbuf>:
    1308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    130c:	461d      	mov	r5, r3
    130e:	4b51      	ldr	r3, [pc, #324]	; (1454 <setvbuf+0x14c>)
    1310:	681e      	ldr	r6, [r3, #0]
    1312:	4604      	mov	r4, r0
    1314:	460f      	mov	r7, r1
    1316:	4690      	mov	r8, r2
    1318:	b126      	cbz	r6, 1324 <setvbuf+0x1c>
    131a:	69b3      	ldr	r3, [r6, #24]
    131c:	b913      	cbnz	r3, 1324 <setvbuf+0x1c>
    131e:	4630      	mov	r0, r6
    1320:	f000 f992 	bl	1648 <__sinit>
    1324:	4b4c      	ldr	r3, [pc, #304]	; (1458 <setvbuf+0x150>)
    1326:	429c      	cmp	r4, r3
    1328:	d152      	bne.n	13d0 <setvbuf+0xc8>
    132a:	6874      	ldr	r4, [r6, #4]
    132c:	f1b8 0f02 	cmp.w	r8, #2
    1330:	d006      	beq.n	1340 <setvbuf+0x38>
    1332:	f1b8 0f01 	cmp.w	r8, #1
    1336:	f200 8089 	bhi.w	144c <setvbuf+0x144>
    133a:	2d00      	cmp	r5, #0
    133c:	f2c0 8086 	blt.w	144c <setvbuf+0x144>
    1340:	4621      	mov	r1, r4
    1342:	4630      	mov	r0, r6
    1344:	f000 f916 	bl	1574 <_fflush_r>
    1348:	6b61      	ldr	r1, [r4, #52]	; 0x34
    134a:	b141      	cbz	r1, 135e <setvbuf+0x56>
    134c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1350:	4299      	cmp	r1, r3
    1352:	d002      	beq.n	135a <setvbuf+0x52>
    1354:	4630      	mov	r0, r6
    1356:	f000 fa2d 	bl	17b4 <_free_r>
    135a:	2300      	movs	r3, #0
    135c:	6363      	str	r3, [r4, #52]	; 0x34
    135e:	2300      	movs	r3, #0
    1360:	61a3      	str	r3, [r4, #24]
    1362:	6063      	str	r3, [r4, #4]
    1364:	89a3      	ldrh	r3, [r4, #12]
    1366:	061b      	lsls	r3, r3, #24
    1368:	d503      	bpl.n	1372 <setvbuf+0x6a>
    136a:	6921      	ldr	r1, [r4, #16]
    136c:	4630      	mov	r0, r6
    136e:	f000 fa21 	bl	17b4 <_free_r>
    1372:	89a3      	ldrh	r3, [r4, #12]
    1374:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    1378:	f023 0303 	bic.w	r3, r3, #3
    137c:	f1b8 0f02 	cmp.w	r8, #2
    1380:	81a3      	strh	r3, [r4, #12]
    1382:	d05d      	beq.n	1440 <setvbuf+0x138>
    1384:	ab01      	add	r3, sp, #4
    1386:	466a      	mov	r2, sp
    1388:	4621      	mov	r1, r4
    138a:	4630      	mov	r0, r6
    138c:	f000 f9e6 	bl	175c <__swhatbuf_r>
    1390:	89a3      	ldrh	r3, [r4, #12]
    1392:	4318      	orrs	r0, r3
    1394:	81a0      	strh	r0, [r4, #12]
    1396:	bb2d      	cbnz	r5, 13e4 <setvbuf+0xdc>
    1398:	9d00      	ldr	r5, [sp, #0]
    139a:	4628      	mov	r0, r5
    139c:	f000 fa02 	bl	17a4 <malloc>
    13a0:	4607      	mov	r7, r0
    13a2:	2800      	cmp	r0, #0
    13a4:	d14e      	bne.n	1444 <setvbuf+0x13c>
    13a6:	f8dd 9000 	ldr.w	r9, [sp]
    13aa:	45a9      	cmp	r9, r5
    13ac:	d13c      	bne.n	1428 <setvbuf+0x120>
    13ae:	f04f 30ff 	mov.w	r0, #4294967295
    13b2:	89a3      	ldrh	r3, [r4, #12]
    13b4:	f043 0302 	orr.w	r3, r3, #2
    13b8:	81a3      	strh	r3, [r4, #12]
    13ba:	2300      	movs	r3, #0
    13bc:	60a3      	str	r3, [r4, #8]
    13be:	f104 0347 	add.w	r3, r4, #71	; 0x47
    13c2:	6023      	str	r3, [r4, #0]
    13c4:	6123      	str	r3, [r4, #16]
    13c6:	2301      	movs	r3, #1
    13c8:	6163      	str	r3, [r4, #20]
    13ca:	b003      	add	sp, #12
    13cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    13d0:	4b22      	ldr	r3, [pc, #136]	; (145c <setvbuf+0x154>)
    13d2:	429c      	cmp	r4, r3
    13d4:	d101      	bne.n	13da <setvbuf+0xd2>
    13d6:	68b4      	ldr	r4, [r6, #8]
    13d8:	e7a8      	b.n	132c <setvbuf+0x24>
    13da:	4b21      	ldr	r3, [pc, #132]	; (1460 <setvbuf+0x158>)
    13dc:	429c      	cmp	r4, r3
    13de:	bf08      	it	eq
    13e0:	68f4      	ldreq	r4, [r6, #12]
    13e2:	e7a3      	b.n	132c <setvbuf+0x24>
    13e4:	2f00      	cmp	r7, #0
    13e6:	d0d8      	beq.n	139a <setvbuf+0x92>
    13e8:	69b3      	ldr	r3, [r6, #24]
    13ea:	b913      	cbnz	r3, 13f2 <setvbuf+0xea>
    13ec:	4630      	mov	r0, r6
    13ee:	f000 f92b 	bl	1648 <__sinit>
    13f2:	f1b8 0f01 	cmp.w	r8, #1
    13f6:	bf08      	it	eq
    13f8:	89a3      	ldrheq	r3, [r4, #12]
    13fa:	6027      	str	r7, [r4, #0]
    13fc:	bf04      	itt	eq
    13fe:	f043 0301 	orreq.w	r3, r3, #1
    1402:	81a3      	strheq	r3, [r4, #12]
    1404:	89a3      	ldrh	r3, [r4, #12]
    1406:	6127      	str	r7, [r4, #16]
    1408:	f013 0008 	ands.w	r0, r3, #8
    140c:	6165      	str	r5, [r4, #20]
    140e:	d01b      	beq.n	1448 <setvbuf+0x140>
    1410:	f013 0001 	ands.w	r0, r3, #1
    1414:	bf18      	it	ne
    1416:	426d      	negne	r5, r5
    1418:	f04f 0300 	mov.w	r3, #0
    141c:	bf1d      	ittte	ne
    141e:	60a3      	strne	r3, [r4, #8]
    1420:	61a5      	strne	r5, [r4, #24]
    1422:	4618      	movne	r0, r3
    1424:	60a5      	streq	r5, [r4, #8]
    1426:	e7d0      	b.n	13ca <setvbuf+0xc2>
    1428:	4648      	mov	r0, r9
    142a:	f000 f9bb 	bl	17a4 <malloc>
    142e:	4607      	mov	r7, r0
    1430:	2800      	cmp	r0, #0
    1432:	d0bc      	beq.n	13ae <setvbuf+0xa6>
    1434:	89a3      	ldrh	r3, [r4, #12]
    1436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    143a:	81a3      	strh	r3, [r4, #12]
    143c:	464d      	mov	r5, r9
    143e:	e7d3      	b.n	13e8 <setvbuf+0xe0>
    1440:	2000      	movs	r0, #0
    1442:	e7b6      	b.n	13b2 <setvbuf+0xaa>
    1444:	46a9      	mov	r9, r5
    1446:	e7f5      	b.n	1434 <setvbuf+0x12c>
    1448:	60a0      	str	r0, [r4, #8]
    144a:	e7be      	b.n	13ca <setvbuf+0xc2>
    144c:	f04f 30ff 	mov.w	r0, #4294967295
    1450:	e7bb      	b.n	13ca <setvbuf+0xc2>
    1452:	bf00      	nop
    1454:	20000000 	.word	0x20000000
    1458:	00001b88 	.word	0x00001b88
    145c:	00001ba8 	.word	0x00001ba8
    1460:	00001b68 	.word	0x00001b68

00001464 <__sflush_r>:
    1464:	898a      	ldrh	r2, [r1, #12]
    1466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    146a:	4605      	mov	r5, r0
    146c:	0710      	lsls	r0, r2, #28
    146e:	460c      	mov	r4, r1
    1470:	d45a      	bmi.n	1528 <__sflush_r+0xc4>
    1472:	684b      	ldr	r3, [r1, #4]
    1474:	2b00      	cmp	r3, #0
    1476:	dc05      	bgt.n	1484 <__sflush_r+0x20>
    1478:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    147a:	2b00      	cmp	r3, #0
    147c:	dc02      	bgt.n	1484 <__sflush_r+0x20>
    147e:	2000      	movs	r0, #0
    1480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1484:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1486:	2e00      	cmp	r6, #0
    1488:	d0f9      	beq.n	147e <__sflush_r+0x1a>
    148a:	2300      	movs	r3, #0
    148c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1490:	682f      	ldr	r7, [r5, #0]
    1492:	602b      	str	r3, [r5, #0]
    1494:	d033      	beq.n	14fe <__sflush_r+0x9a>
    1496:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1498:	89a3      	ldrh	r3, [r4, #12]
    149a:	075a      	lsls	r2, r3, #29
    149c:	d505      	bpl.n	14aa <__sflush_r+0x46>
    149e:	6863      	ldr	r3, [r4, #4]
    14a0:	1ac0      	subs	r0, r0, r3
    14a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    14a4:	b10b      	cbz	r3, 14aa <__sflush_r+0x46>
    14a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    14a8:	1ac0      	subs	r0, r0, r3
    14aa:	2300      	movs	r3, #0
    14ac:	4602      	mov	r2, r0
    14ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    14b0:	6a21      	ldr	r1, [r4, #32]
    14b2:	4628      	mov	r0, r5
    14b4:	47b0      	blx	r6
    14b6:	1c43      	adds	r3, r0, #1
    14b8:	89a3      	ldrh	r3, [r4, #12]
    14ba:	d106      	bne.n	14ca <__sflush_r+0x66>
    14bc:	6829      	ldr	r1, [r5, #0]
    14be:	291d      	cmp	r1, #29
    14c0:	d84b      	bhi.n	155a <__sflush_r+0xf6>
    14c2:	4a2b      	ldr	r2, [pc, #172]	; (1570 <__sflush_r+0x10c>)
    14c4:	40ca      	lsrs	r2, r1
    14c6:	07d6      	lsls	r6, r2, #31
    14c8:	d547      	bpl.n	155a <__sflush_r+0xf6>
    14ca:	2200      	movs	r2, #0
    14cc:	6062      	str	r2, [r4, #4]
    14ce:	04d9      	lsls	r1, r3, #19
    14d0:	6922      	ldr	r2, [r4, #16]
    14d2:	6022      	str	r2, [r4, #0]
    14d4:	d504      	bpl.n	14e0 <__sflush_r+0x7c>
    14d6:	1c42      	adds	r2, r0, #1
    14d8:	d101      	bne.n	14de <__sflush_r+0x7a>
    14da:	682b      	ldr	r3, [r5, #0]
    14dc:	b903      	cbnz	r3, 14e0 <__sflush_r+0x7c>
    14de:	6560      	str	r0, [r4, #84]	; 0x54
    14e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    14e2:	602f      	str	r7, [r5, #0]
    14e4:	2900      	cmp	r1, #0
    14e6:	d0ca      	beq.n	147e <__sflush_r+0x1a>
    14e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    14ec:	4299      	cmp	r1, r3
    14ee:	d002      	beq.n	14f6 <__sflush_r+0x92>
    14f0:	4628      	mov	r0, r5
    14f2:	f000 f95f 	bl	17b4 <_free_r>
    14f6:	2000      	movs	r0, #0
    14f8:	6360      	str	r0, [r4, #52]	; 0x34
    14fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14fe:	6a21      	ldr	r1, [r4, #32]
    1500:	2301      	movs	r3, #1
    1502:	4628      	mov	r0, r5
    1504:	47b0      	blx	r6
    1506:	1c41      	adds	r1, r0, #1
    1508:	d1c6      	bne.n	1498 <__sflush_r+0x34>
    150a:	682b      	ldr	r3, [r5, #0]
    150c:	2b00      	cmp	r3, #0
    150e:	d0c3      	beq.n	1498 <__sflush_r+0x34>
    1510:	2b1d      	cmp	r3, #29
    1512:	d001      	beq.n	1518 <__sflush_r+0xb4>
    1514:	2b16      	cmp	r3, #22
    1516:	d101      	bne.n	151c <__sflush_r+0xb8>
    1518:	602f      	str	r7, [r5, #0]
    151a:	e7b0      	b.n	147e <__sflush_r+0x1a>
    151c:	89a3      	ldrh	r3, [r4, #12]
    151e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1522:	81a3      	strh	r3, [r4, #12]
    1524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1528:	690f      	ldr	r7, [r1, #16]
    152a:	2f00      	cmp	r7, #0
    152c:	d0a7      	beq.n	147e <__sflush_r+0x1a>
    152e:	0793      	lsls	r3, r2, #30
    1530:	680e      	ldr	r6, [r1, #0]
    1532:	bf08      	it	eq
    1534:	694b      	ldreq	r3, [r1, #20]
    1536:	600f      	str	r7, [r1, #0]
    1538:	bf18      	it	ne
    153a:	2300      	movne	r3, #0
    153c:	eba6 0807 	sub.w	r8, r6, r7
    1540:	608b      	str	r3, [r1, #8]
    1542:	f1b8 0f00 	cmp.w	r8, #0
    1546:	dd9a      	ble.n	147e <__sflush_r+0x1a>
    1548:	4643      	mov	r3, r8
    154a:	463a      	mov	r2, r7
    154c:	6a21      	ldr	r1, [r4, #32]
    154e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1550:	4628      	mov	r0, r5
    1552:	47b0      	blx	r6
    1554:	2800      	cmp	r0, #0
    1556:	dc07      	bgt.n	1568 <__sflush_r+0x104>
    1558:	89a3      	ldrh	r3, [r4, #12]
    155a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    155e:	81a3      	strh	r3, [r4, #12]
    1560:	f04f 30ff 	mov.w	r0, #4294967295
    1564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1568:	4407      	add	r7, r0
    156a:	eba8 0800 	sub.w	r8, r8, r0
    156e:	e7e8      	b.n	1542 <__sflush_r+0xde>
    1570:	20400001 	.word	0x20400001

00001574 <_fflush_r>:
    1574:	b538      	push	{r3, r4, r5, lr}
    1576:	690b      	ldr	r3, [r1, #16]
    1578:	4605      	mov	r5, r0
    157a:	460c      	mov	r4, r1
    157c:	b1db      	cbz	r3, 15b6 <_fflush_r+0x42>
    157e:	b118      	cbz	r0, 1588 <_fflush_r+0x14>
    1580:	6983      	ldr	r3, [r0, #24]
    1582:	b90b      	cbnz	r3, 1588 <_fflush_r+0x14>
    1584:	f000 f860 	bl	1648 <__sinit>
    1588:	4b0c      	ldr	r3, [pc, #48]	; (15bc <_fflush_r+0x48>)
    158a:	429c      	cmp	r4, r3
    158c:	d109      	bne.n	15a2 <_fflush_r+0x2e>
    158e:	686c      	ldr	r4, [r5, #4]
    1590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1594:	b17b      	cbz	r3, 15b6 <_fflush_r+0x42>
    1596:	4621      	mov	r1, r4
    1598:	4628      	mov	r0, r5
    159a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    159e:	f7ff bf61 	b.w	1464 <__sflush_r>
    15a2:	4b07      	ldr	r3, [pc, #28]	; (15c0 <_fflush_r+0x4c>)
    15a4:	429c      	cmp	r4, r3
    15a6:	d101      	bne.n	15ac <_fflush_r+0x38>
    15a8:	68ac      	ldr	r4, [r5, #8]
    15aa:	e7f1      	b.n	1590 <_fflush_r+0x1c>
    15ac:	4b05      	ldr	r3, [pc, #20]	; (15c4 <_fflush_r+0x50>)
    15ae:	429c      	cmp	r4, r3
    15b0:	bf08      	it	eq
    15b2:	68ec      	ldreq	r4, [r5, #12]
    15b4:	e7ec      	b.n	1590 <_fflush_r+0x1c>
    15b6:	2000      	movs	r0, #0
    15b8:	bd38      	pop	{r3, r4, r5, pc}
    15ba:	bf00      	nop
    15bc:	00001b88 	.word	0x00001b88
    15c0:	00001ba8 	.word	0x00001ba8
    15c4:	00001b68 	.word	0x00001b68

000015c8 <_cleanup_r>:
    15c8:	4901      	ldr	r1, [pc, #4]	; (15d0 <_cleanup_r+0x8>)
    15ca:	f000 b8a9 	b.w	1720 <_fwalk_reent>
    15ce:	bf00      	nop
    15d0:	00001575 	.word	0x00001575

000015d4 <std.isra.0>:
    15d4:	2300      	movs	r3, #0
    15d6:	b510      	push	{r4, lr}
    15d8:	4604      	mov	r4, r0
    15da:	6003      	str	r3, [r0, #0]
    15dc:	6043      	str	r3, [r0, #4]
    15de:	6083      	str	r3, [r0, #8]
    15e0:	8181      	strh	r1, [r0, #12]
    15e2:	6643      	str	r3, [r0, #100]	; 0x64
    15e4:	81c2      	strh	r2, [r0, #14]
    15e6:	6103      	str	r3, [r0, #16]
    15e8:	6143      	str	r3, [r0, #20]
    15ea:	6183      	str	r3, [r0, #24]
    15ec:	4619      	mov	r1, r3
    15ee:	2208      	movs	r2, #8
    15f0:	305c      	adds	r0, #92	; 0x5c
    15f2:	f7ff fe79 	bl	12e8 <memset>
    15f6:	4b05      	ldr	r3, [pc, #20]	; (160c <std.isra.0+0x38>)
    15f8:	6263      	str	r3, [r4, #36]	; 0x24
    15fa:	4b05      	ldr	r3, [pc, #20]	; (1610 <std.isra.0+0x3c>)
    15fc:	62a3      	str	r3, [r4, #40]	; 0x28
    15fe:	4b05      	ldr	r3, [pc, #20]	; (1614 <std.isra.0+0x40>)
    1600:	62e3      	str	r3, [r4, #44]	; 0x2c
    1602:	4b05      	ldr	r3, [pc, #20]	; (1618 <std.isra.0+0x44>)
    1604:	6224      	str	r4, [r4, #32]
    1606:	6323      	str	r3, [r4, #48]	; 0x30
    1608:	bd10      	pop	{r4, pc}
    160a:	bf00      	nop
    160c:	0000192d 	.word	0x0000192d
    1610:	0000194f 	.word	0x0000194f
    1614:	00001987 	.word	0x00001987
    1618:	000019ab 	.word	0x000019ab

0000161c <__sfmoreglue>:
    161c:	b570      	push	{r4, r5, r6, lr}
    161e:	1e4a      	subs	r2, r1, #1
    1620:	2568      	movs	r5, #104	; 0x68
    1622:	4355      	muls	r5, r2
    1624:	460e      	mov	r6, r1
    1626:	f105 0174 	add.w	r1, r5, #116	; 0x74
    162a:	f000 f911 	bl	1850 <_malloc_r>
    162e:	4604      	mov	r4, r0
    1630:	b140      	cbz	r0, 1644 <__sfmoreglue+0x28>
    1632:	2100      	movs	r1, #0
    1634:	e880 0042 	stmia.w	r0, {r1, r6}
    1638:	300c      	adds	r0, #12
    163a:	60a0      	str	r0, [r4, #8]
    163c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1640:	f7ff fe52 	bl	12e8 <memset>
    1644:	4620      	mov	r0, r4
    1646:	bd70      	pop	{r4, r5, r6, pc}

00001648 <__sinit>:
    1648:	6983      	ldr	r3, [r0, #24]
    164a:	b510      	push	{r4, lr}
    164c:	4604      	mov	r4, r0
    164e:	bb33      	cbnz	r3, 169e <__sinit+0x56>
    1650:	6483      	str	r3, [r0, #72]	; 0x48
    1652:	64c3      	str	r3, [r0, #76]	; 0x4c
    1654:	6503      	str	r3, [r0, #80]	; 0x50
    1656:	4b12      	ldr	r3, [pc, #72]	; (16a0 <__sinit+0x58>)
    1658:	4a12      	ldr	r2, [pc, #72]	; (16a4 <__sinit+0x5c>)
    165a:	681b      	ldr	r3, [r3, #0]
    165c:	6282      	str	r2, [r0, #40]	; 0x28
    165e:	4298      	cmp	r0, r3
    1660:	bf04      	itt	eq
    1662:	2301      	moveq	r3, #1
    1664:	6183      	streq	r3, [r0, #24]
    1666:	f000 f81f 	bl	16a8 <__sfp>
    166a:	6060      	str	r0, [r4, #4]
    166c:	4620      	mov	r0, r4
    166e:	f000 f81b 	bl	16a8 <__sfp>
    1672:	60a0      	str	r0, [r4, #8]
    1674:	4620      	mov	r0, r4
    1676:	f000 f817 	bl	16a8 <__sfp>
    167a:	2200      	movs	r2, #0
    167c:	60e0      	str	r0, [r4, #12]
    167e:	2104      	movs	r1, #4
    1680:	6860      	ldr	r0, [r4, #4]
    1682:	f7ff ffa7 	bl	15d4 <std.isra.0>
    1686:	2201      	movs	r2, #1
    1688:	2109      	movs	r1, #9
    168a:	68a0      	ldr	r0, [r4, #8]
    168c:	f7ff ffa2 	bl	15d4 <std.isra.0>
    1690:	2202      	movs	r2, #2
    1692:	2112      	movs	r1, #18
    1694:	68e0      	ldr	r0, [r4, #12]
    1696:	f7ff ff9d 	bl	15d4 <std.isra.0>
    169a:	2301      	movs	r3, #1
    169c:	61a3      	str	r3, [r4, #24]
    169e:	bd10      	pop	{r4, pc}
    16a0:	00001b64 	.word	0x00001b64
    16a4:	000015c9 	.word	0x000015c9

000016a8 <__sfp>:
    16a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16aa:	4b1c      	ldr	r3, [pc, #112]	; (171c <__sfp+0x74>)
    16ac:	681e      	ldr	r6, [r3, #0]
    16ae:	69b3      	ldr	r3, [r6, #24]
    16b0:	4607      	mov	r7, r0
    16b2:	b913      	cbnz	r3, 16ba <__sfp+0x12>
    16b4:	4630      	mov	r0, r6
    16b6:	f7ff ffc7 	bl	1648 <__sinit>
    16ba:	3648      	adds	r6, #72	; 0x48
    16bc:	68b4      	ldr	r4, [r6, #8]
    16be:	6873      	ldr	r3, [r6, #4]
    16c0:	3b01      	subs	r3, #1
    16c2:	d503      	bpl.n	16cc <__sfp+0x24>
    16c4:	6833      	ldr	r3, [r6, #0]
    16c6:	b133      	cbz	r3, 16d6 <__sfp+0x2e>
    16c8:	6836      	ldr	r6, [r6, #0]
    16ca:	e7f7      	b.n	16bc <__sfp+0x14>
    16cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    16d0:	b16d      	cbz	r5, 16ee <__sfp+0x46>
    16d2:	3468      	adds	r4, #104	; 0x68
    16d4:	e7f4      	b.n	16c0 <__sfp+0x18>
    16d6:	2104      	movs	r1, #4
    16d8:	4638      	mov	r0, r7
    16da:	f7ff ff9f 	bl	161c <__sfmoreglue>
    16de:	6030      	str	r0, [r6, #0]
    16e0:	2800      	cmp	r0, #0
    16e2:	d1f1      	bne.n	16c8 <__sfp+0x20>
    16e4:	230c      	movs	r3, #12
    16e6:	603b      	str	r3, [r7, #0]
    16e8:	4604      	mov	r4, r0
    16ea:	4620      	mov	r0, r4
    16ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    16f2:	81e3      	strh	r3, [r4, #14]
    16f4:	2301      	movs	r3, #1
    16f6:	81a3      	strh	r3, [r4, #12]
    16f8:	6665      	str	r5, [r4, #100]	; 0x64
    16fa:	6025      	str	r5, [r4, #0]
    16fc:	60a5      	str	r5, [r4, #8]
    16fe:	6065      	str	r5, [r4, #4]
    1700:	6125      	str	r5, [r4, #16]
    1702:	6165      	str	r5, [r4, #20]
    1704:	61a5      	str	r5, [r4, #24]
    1706:	2208      	movs	r2, #8
    1708:	4629      	mov	r1, r5
    170a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    170e:	f7ff fdeb 	bl	12e8 <memset>
    1712:	6365      	str	r5, [r4, #52]	; 0x34
    1714:	63a5      	str	r5, [r4, #56]	; 0x38
    1716:	64a5      	str	r5, [r4, #72]	; 0x48
    1718:	64e5      	str	r5, [r4, #76]	; 0x4c
    171a:	e7e6      	b.n	16ea <__sfp+0x42>
    171c:	00001b64 	.word	0x00001b64

00001720 <_fwalk_reent>:
    1720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1724:	4680      	mov	r8, r0
    1726:	4689      	mov	r9, r1
    1728:	f100 0448 	add.w	r4, r0, #72	; 0x48
    172c:	2600      	movs	r6, #0
    172e:	b914      	cbnz	r4, 1736 <_fwalk_reent+0x16>
    1730:	4630      	mov	r0, r6
    1732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1736:	68a5      	ldr	r5, [r4, #8]
    1738:	6867      	ldr	r7, [r4, #4]
    173a:	3f01      	subs	r7, #1
    173c:	d501      	bpl.n	1742 <_fwalk_reent+0x22>
    173e:	6824      	ldr	r4, [r4, #0]
    1740:	e7f5      	b.n	172e <_fwalk_reent+0xe>
    1742:	89ab      	ldrh	r3, [r5, #12]
    1744:	2b01      	cmp	r3, #1
    1746:	d907      	bls.n	1758 <_fwalk_reent+0x38>
    1748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    174c:	3301      	adds	r3, #1
    174e:	d003      	beq.n	1758 <_fwalk_reent+0x38>
    1750:	4629      	mov	r1, r5
    1752:	4640      	mov	r0, r8
    1754:	47c8      	blx	r9
    1756:	4306      	orrs	r6, r0
    1758:	3568      	adds	r5, #104	; 0x68
    175a:	e7ee      	b.n	173a <_fwalk_reent+0x1a>

0000175c <__swhatbuf_r>:
    175c:	b570      	push	{r4, r5, r6, lr}
    175e:	460e      	mov	r6, r1
    1760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1764:	2900      	cmp	r1, #0
    1766:	b090      	sub	sp, #64	; 0x40
    1768:	4614      	mov	r4, r2
    176a:	461d      	mov	r5, r3
    176c:	da07      	bge.n	177e <__swhatbuf_r+0x22>
    176e:	2300      	movs	r3, #0
    1770:	602b      	str	r3, [r5, #0]
    1772:	89b3      	ldrh	r3, [r6, #12]
    1774:	061a      	lsls	r2, r3, #24
    1776:	d410      	bmi.n	179a <__swhatbuf_r+0x3e>
    1778:	f44f 6380 	mov.w	r3, #1024	; 0x400
    177c:	e00e      	b.n	179c <__swhatbuf_r+0x40>
    177e:	aa01      	add	r2, sp, #4
    1780:	f000 f93a 	bl	19f8 <_fstat_r>
    1784:	2800      	cmp	r0, #0
    1786:	dbf2      	blt.n	176e <__swhatbuf_r+0x12>
    1788:	9a02      	ldr	r2, [sp, #8]
    178a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    178e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    1792:	425a      	negs	r2, r3
    1794:	415a      	adcs	r2, r3
    1796:	602a      	str	r2, [r5, #0]
    1798:	e7ee      	b.n	1778 <__swhatbuf_r+0x1c>
    179a:	2340      	movs	r3, #64	; 0x40
    179c:	2000      	movs	r0, #0
    179e:	6023      	str	r3, [r4, #0]
    17a0:	b010      	add	sp, #64	; 0x40
    17a2:	bd70      	pop	{r4, r5, r6, pc}

000017a4 <malloc>:
    17a4:	4b02      	ldr	r3, [pc, #8]	; (17b0 <malloc+0xc>)
    17a6:	4601      	mov	r1, r0
    17a8:	6818      	ldr	r0, [r3, #0]
    17aa:	f000 b851 	b.w	1850 <_malloc_r>
    17ae:	bf00      	nop
    17b0:	20000000 	.word	0x20000000

000017b4 <_free_r>:
    17b4:	b538      	push	{r3, r4, r5, lr}
    17b6:	4605      	mov	r5, r0
    17b8:	2900      	cmp	r1, #0
    17ba:	d045      	beq.n	1848 <_free_r+0x94>
    17bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
    17c0:	1f0c      	subs	r4, r1, #4
    17c2:	2b00      	cmp	r3, #0
    17c4:	bfb8      	it	lt
    17c6:	18e4      	addlt	r4, r4, r3
    17c8:	f000 f93a 	bl	1a40 <__malloc_lock>
    17cc:	4a1f      	ldr	r2, [pc, #124]	; (184c <_free_r+0x98>)
    17ce:	6813      	ldr	r3, [r2, #0]
    17d0:	4610      	mov	r0, r2
    17d2:	b933      	cbnz	r3, 17e2 <_free_r+0x2e>
    17d4:	6063      	str	r3, [r4, #4]
    17d6:	6014      	str	r4, [r2, #0]
    17d8:	4628      	mov	r0, r5
    17da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    17de:	f000 b930 	b.w	1a42 <__malloc_unlock>
    17e2:	42a3      	cmp	r3, r4
    17e4:	d90c      	bls.n	1800 <_free_r+0x4c>
    17e6:	6821      	ldr	r1, [r4, #0]
    17e8:	1862      	adds	r2, r4, r1
    17ea:	4293      	cmp	r3, r2
    17ec:	bf04      	itt	eq
    17ee:	681a      	ldreq	r2, [r3, #0]
    17f0:	685b      	ldreq	r3, [r3, #4]
    17f2:	6063      	str	r3, [r4, #4]
    17f4:	bf04      	itt	eq
    17f6:	1852      	addeq	r2, r2, r1
    17f8:	6022      	streq	r2, [r4, #0]
    17fa:	6004      	str	r4, [r0, #0]
    17fc:	e7ec      	b.n	17d8 <_free_r+0x24>
    17fe:	4613      	mov	r3, r2
    1800:	685a      	ldr	r2, [r3, #4]
    1802:	b10a      	cbz	r2, 1808 <_free_r+0x54>
    1804:	42a2      	cmp	r2, r4
    1806:	d9fa      	bls.n	17fe <_free_r+0x4a>
    1808:	6819      	ldr	r1, [r3, #0]
    180a:	1858      	adds	r0, r3, r1
    180c:	42a0      	cmp	r0, r4
    180e:	d10b      	bne.n	1828 <_free_r+0x74>
    1810:	6820      	ldr	r0, [r4, #0]
    1812:	4401      	add	r1, r0
    1814:	1858      	adds	r0, r3, r1
    1816:	4282      	cmp	r2, r0
    1818:	6019      	str	r1, [r3, #0]
    181a:	d1dd      	bne.n	17d8 <_free_r+0x24>
    181c:	6810      	ldr	r0, [r2, #0]
    181e:	6852      	ldr	r2, [r2, #4]
    1820:	605a      	str	r2, [r3, #4]
    1822:	4401      	add	r1, r0
    1824:	6019      	str	r1, [r3, #0]
    1826:	e7d7      	b.n	17d8 <_free_r+0x24>
    1828:	d902      	bls.n	1830 <_free_r+0x7c>
    182a:	230c      	movs	r3, #12
    182c:	602b      	str	r3, [r5, #0]
    182e:	e7d3      	b.n	17d8 <_free_r+0x24>
    1830:	6820      	ldr	r0, [r4, #0]
    1832:	1821      	adds	r1, r4, r0
    1834:	428a      	cmp	r2, r1
    1836:	bf04      	itt	eq
    1838:	6811      	ldreq	r1, [r2, #0]
    183a:	6852      	ldreq	r2, [r2, #4]
    183c:	6062      	str	r2, [r4, #4]
    183e:	bf04      	itt	eq
    1840:	1809      	addeq	r1, r1, r0
    1842:	6021      	streq	r1, [r4, #0]
    1844:	605c      	str	r4, [r3, #4]
    1846:	e7c7      	b.n	17d8 <_free_r+0x24>
    1848:	bd38      	pop	{r3, r4, r5, pc}
    184a:	bf00      	nop
    184c:	2000008c 	.word	0x2000008c

00001850 <_malloc_r>:
    1850:	b570      	push	{r4, r5, r6, lr}
    1852:	1ccd      	adds	r5, r1, #3
    1854:	f025 0503 	bic.w	r5, r5, #3
    1858:	3508      	adds	r5, #8
    185a:	2d0c      	cmp	r5, #12
    185c:	bf38      	it	cc
    185e:	250c      	movcc	r5, #12
    1860:	2d00      	cmp	r5, #0
    1862:	4606      	mov	r6, r0
    1864:	db01      	blt.n	186a <_malloc_r+0x1a>
    1866:	42a9      	cmp	r1, r5
    1868:	d903      	bls.n	1872 <_malloc_r+0x22>
    186a:	230c      	movs	r3, #12
    186c:	6033      	str	r3, [r6, #0]
    186e:	2000      	movs	r0, #0
    1870:	bd70      	pop	{r4, r5, r6, pc}
    1872:	f000 f8e5 	bl	1a40 <__malloc_lock>
    1876:	4a23      	ldr	r2, [pc, #140]	; (1904 <_malloc_r+0xb4>)
    1878:	6814      	ldr	r4, [r2, #0]
    187a:	4621      	mov	r1, r4
    187c:	b991      	cbnz	r1, 18a4 <_malloc_r+0x54>
    187e:	4c22      	ldr	r4, [pc, #136]	; (1908 <_malloc_r+0xb8>)
    1880:	6823      	ldr	r3, [r4, #0]
    1882:	b91b      	cbnz	r3, 188c <_malloc_r+0x3c>
    1884:	4630      	mov	r0, r6
    1886:	f000 f841 	bl	190c <_sbrk_r>
    188a:	6020      	str	r0, [r4, #0]
    188c:	4629      	mov	r1, r5
    188e:	4630      	mov	r0, r6
    1890:	f000 f83c 	bl	190c <_sbrk_r>
    1894:	1c43      	adds	r3, r0, #1
    1896:	d126      	bne.n	18e6 <_malloc_r+0x96>
    1898:	230c      	movs	r3, #12
    189a:	6033      	str	r3, [r6, #0]
    189c:	4630      	mov	r0, r6
    189e:	f000 f8d0 	bl	1a42 <__malloc_unlock>
    18a2:	e7e4      	b.n	186e <_malloc_r+0x1e>
    18a4:	680b      	ldr	r3, [r1, #0]
    18a6:	1b5b      	subs	r3, r3, r5
    18a8:	d41a      	bmi.n	18e0 <_malloc_r+0x90>
    18aa:	2b0b      	cmp	r3, #11
    18ac:	d90f      	bls.n	18ce <_malloc_r+0x7e>
    18ae:	600b      	str	r3, [r1, #0]
    18b0:	50cd      	str	r5, [r1, r3]
    18b2:	18cc      	adds	r4, r1, r3
    18b4:	4630      	mov	r0, r6
    18b6:	f000 f8c4 	bl	1a42 <__malloc_unlock>
    18ba:	f104 000b 	add.w	r0, r4, #11
    18be:	1d23      	adds	r3, r4, #4
    18c0:	f020 0007 	bic.w	r0, r0, #7
    18c4:	1ac3      	subs	r3, r0, r3
    18c6:	d01b      	beq.n	1900 <_malloc_r+0xb0>
    18c8:	425a      	negs	r2, r3
    18ca:	50e2      	str	r2, [r4, r3]
    18cc:	bd70      	pop	{r4, r5, r6, pc}
    18ce:	428c      	cmp	r4, r1
    18d0:	bf0d      	iteet	eq
    18d2:	6863      	ldreq	r3, [r4, #4]
    18d4:	684b      	ldrne	r3, [r1, #4]
    18d6:	6063      	strne	r3, [r4, #4]
    18d8:	6013      	streq	r3, [r2, #0]
    18da:	bf18      	it	ne
    18dc:	460c      	movne	r4, r1
    18de:	e7e9      	b.n	18b4 <_malloc_r+0x64>
    18e0:	460c      	mov	r4, r1
    18e2:	6849      	ldr	r1, [r1, #4]
    18e4:	e7ca      	b.n	187c <_malloc_r+0x2c>
    18e6:	1cc4      	adds	r4, r0, #3
    18e8:	f024 0403 	bic.w	r4, r4, #3
    18ec:	42a0      	cmp	r0, r4
    18ee:	d005      	beq.n	18fc <_malloc_r+0xac>
    18f0:	1a21      	subs	r1, r4, r0
    18f2:	4630      	mov	r0, r6
    18f4:	f000 f80a 	bl	190c <_sbrk_r>
    18f8:	3001      	adds	r0, #1
    18fa:	d0cd      	beq.n	1898 <_malloc_r+0x48>
    18fc:	6025      	str	r5, [r4, #0]
    18fe:	e7d9      	b.n	18b4 <_malloc_r+0x64>
    1900:	bd70      	pop	{r4, r5, r6, pc}
    1902:	bf00      	nop
    1904:	2000008c 	.word	0x2000008c
    1908:	20000090 	.word	0x20000090

0000190c <_sbrk_r>:
    190c:	b538      	push	{r3, r4, r5, lr}
    190e:	4c06      	ldr	r4, [pc, #24]	; (1928 <_sbrk_r+0x1c>)
    1910:	2300      	movs	r3, #0
    1912:	4605      	mov	r5, r0
    1914:	4608      	mov	r0, r1
    1916:	6023      	str	r3, [r4, #0]
    1918:	f7fe ff1c 	bl	754 <_sbrk>
    191c:	1c43      	adds	r3, r0, #1
    191e:	d102      	bne.n	1926 <_sbrk_r+0x1a>
    1920:	6823      	ldr	r3, [r4, #0]
    1922:	b103      	cbz	r3, 1926 <_sbrk_r+0x1a>
    1924:	602b      	str	r3, [r5, #0]
    1926:	bd38      	pop	{r3, r4, r5, pc}
    1928:	200000d0 	.word	0x200000d0

0000192c <__sread>:
    192c:	b510      	push	{r4, lr}
    192e:	460c      	mov	r4, r1
    1930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1934:	f000 f886 	bl	1a44 <_read_r>
    1938:	2800      	cmp	r0, #0
    193a:	bfab      	itete	ge
    193c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    193e:	89a3      	ldrhlt	r3, [r4, #12]
    1940:	181b      	addge	r3, r3, r0
    1942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    1946:	bfac      	ite	ge
    1948:	6563      	strge	r3, [r4, #84]	; 0x54
    194a:	81a3      	strhlt	r3, [r4, #12]
    194c:	bd10      	pop	{r4, pc}

0000194e <__swrite>:
    194e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1952:	461f      	mov	r7, r3
    1954:	898b      	ldrh	r3, [r1, #12]
    1956:	05db      	lsls	r3, r3, #23
    1958:	4605      	mov	r5, r0
    195a:	460c      	mov	r4, r1
    195c:	4616      	mov	r6, r2
    195e:	d505      	bpl.n	196c <__swrite+0x1e>
    1960:	2302      	movs	r3, #2
    1962:	2200      	movs	r2, #0
    1964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1968:	f000 f858 	bl	1a1c <_lseek_r>
    196c:	89a3      	ldrh	r3, [r4, #12]
    196e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1976:	81a3      	strh	r3, [r4, #12]
    1978:	4632      	mov	r2, r6
    197a:	463b      	mov	r3, r7
    197c:	4628      	mov	r0, r5
    197e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1982:	f000 b817 	b.w	19b4 <_write_r>

00001986 <__sseek>:
    1986:	b510      	push	{r4, lr}
    1988:	460c      	mov	r4, r1
    198a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    198e:	f000 f845 	bl	1a1c <_lseek_r>
    1992:	1c43      	adds	r3, r0, #1
    1994:	89a3      	ldrh	r3, [r4, #12]
    1996:	bf15      	itete	ne
    1998:	6560      	strne	r0, [r4, #84]	; 0x54
    199a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    199e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    19a2:	81a3      	strheq	r3, [r4, #12]
    19a4:	bf18      	it	ne
    19a6:	81a3      	strhne	r3, [r4, #12]
    19a8:	bd10      	pop	{r4, pc}

000019aa <__sclose>:
    19aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    19ae:	f000 b813 	b.w	19d8 <_close_r>
	...

000019b4 <_write_r>:
    19b4:	b538      	push	{r3, r4, r5, lr}
    19b6:	4c07      	ldr	r4, [pc, #28]	; (19d4 <_write_r+0x20>)
    19b8:	4605      	mov	r5, r0
    19ba:	4608      	mov	r0, r1
    19bc:	4611      	mov	r1, r2
    19be:	2200      	movs	r2, #0
    19c0:	6022      	str	r2, [r4, #0]
    19c2:	461a      	mov	r2, r3
    19c4:	f7ff fbf8 	bl	11b8 <_write>
    19c8:	1c43      	adds	r3, r0, #1
    19ca:	d102      	bne.n	19d2 <_write_r+0x1e>
    19cc:	6823      	ldr	r3, [r4, #0]
    19ce:	b103      	cbz	r3, 19d2 <_write_r+0x1e>
    19d0:	602b      	str	r3, [r5, #0]
    19d2:	bd38      	pop	{r3, r4, r5, pc}
    19d4:	200000d0 	.word	0x200000d0

000019d8 <_close_r>:
    19d8:	b538      	push	{r3, r4, r5, lr}
    19da:	4c06      	ldr	r4, [pc, #24]	; (19f4 <_close_r+0x1c>)
    19dc:	2300      	movs	r3, #0
    19de:	4605      	mov	r5, r0
    19e0:	4608      	mov	r0, r1
    19e2:	6023      	str	r3, [r4, #0]
    19e4:	f7fe fec8 	bl	778 <_close>
    19e8:	1c43      	adds	r3, r0, #1
    19ea:	d102      	bne.n	19f2 <_close_r+0x1a>
    19ec:	6823      	ldr	r3, [r4, #0]
    19ee:	b103      	cbz	r3, 19f2 <_close_r+0x1a>
    19f0:	602b      	str	r3, [r5, #0]
    19f2:	bd38      	pop	{r3, r4, r5, pc}
    19f4:	200000d0 	.word	0x200000d0

000019f8 <_fstat_r>:
    19f8:	b538      	push	{r3, r4, r5, lr}
    19fa:	4c07      	ldr	r4, [pc, #28]	; (1a18 <_fstat_r+0x20>)
    19fc:	2300      	movs	r3, #0
    19fe:	4605      	mov	r5, r0
    1a00:	4608      	mov	r0, r1
    1a02:	4611      	mov	r1, r2
    1a04:	6023      	str	r3, [r4, #0]
    1a06:	f7fe feba 	bl	77e <_fstat>
    1a0a:	1c43      	adds	r3, r0, #1
    1a0c:	d102      	bne.n	1a14 <_fstat_r+0x1c>
    1a0e:	6823      	ldr	r3, [r4, #0]
    1a10:	b103      	cbz	r3, 1a14 <_fstat_r+0x1c>
    1a12:	602b      	str	r3, [r5, #0]
    1a14:	bd38      	pop	{r3, r4, r5, pc}
    1a16:	bf00      	nop
    1a18:	200000d0 	.word	0x200000d0

00001a1c <_lseek_r>:
    1a1c:	b538      	push	{r3, r4, r5, lr}
    1a1e:	4c07      	ldr	r4, [pc, #28]	; (1a3c <_lseek_r+0x20>)
    1a20:	4605      	mov	r5, r0
    1a22:	4608      	mov	r0, r1
    1a24:	4611      	mov	r1, r2
    1a26:	2200      	movs	r2, #0
    1a28:	6022      	str	r2, [r4, #0]
    1a2a:	461a      	mov	r2, r3
    1a2c:	f7fe feac 	bl	788 <_lseek>
    1a30:	1c43      	adds	r3, r0, #1
    1a32:	d102      	bne.n	1a3a <_lseek_r+0x1e>
    1a34:	6823      	ldr	r3, [r4, #0]
    1a36:	b103      	cbz	r3, 1a3a <_lseek_r+0x1e>
    1a38:	602b      	str	r3, [r5, #0]
    1a3a:	bd38      	pop	{r3, r4, r5, pc}
    1a3c:	200000d0 	.word	0x200000d0

00001a40 <__malloc_lock>:
    1a40:	4770      	bx	lr

00001a42 <__malloc_unlock>:
    1a42:	4770      	bx	lr

00001a44 <_read_r>:
    1a44:	b538      	push	{r3, r4, r5, lr}
    1a46:	4c07      	ldr	r4, [pc, #28]	; (1a64 <_read_r+0x20>)
    1a48:	4605      	mov	r5, r0
    1a4a:	4608      	mov	r0, r1
    1a4c:	4611      	mov	r1, r2
    1a4e:	2200      	movs	r2, #0
    1a50:	6022      	str	r2, [r4, #0]
    1a52:	461a      	mov	r2, r3
    1a54:	f7ff fb9e 	bl	1194 <_read>
    1a58:	1c43      	adds	r3, r0, #1
    1a5a:	d102      	bne.n	1a62 <_read_r+0x1e>
    1a5c:	6823      	ldr	r3, [r4, #0]
    1a5e:	b103      	cbz	r3, 1a62 <_read_r+0x1e>
    1a60:	602b      	str	r3, [r5, #0]
    1a62:	bd38      	pop	{r3, r4, r5, pc}
    1a64:	200000d0 	.word	0x200000d0
    1a68:	682f2e2e 	.word	0x682f2e2e
    1a6c:	732f6c61 	.word	0x732f6c61
    1a70:	682f6372 	.word	0x682f6372
    1a74:	695f6c61 	.word	0x695f6c61
    1a78:	6d5f6332 	.word	0x6d5f6332
    1a7c:	6e79735f 	.word	0x6e79735f
    1a80:	00632e63 	.word	0x00632e63
    1a84:	682f2e2e 	.word	0x682f2e2e
    1a88:	732f6c61 	.word	0x732f6c61
    1a8c:	682f6372 	.word	0x682f6372
    1a90:	695f6c61 	.word	0x695f6c61
    1a94:	00632e6f 	.word	0x00632e6f
    1a98:	682f2e2e 	.word	0x682f2e2e
    1a9c:	732f6c61 	.word	0x732f6c61
    1aa0:	682f6372 	.word	0x682f6372
    1aa4:	755f6c61 	.word	0x755f6c61
    1aa8:	74726173 	.word	0x74726173
    1aac:	6e79735f 	.word	0x6e79735f
    1ab0:	00632e63 	.word	0x00632e63
    1ab4:	40003000 	.word	0x40003000
    1ab8:	40003400 	.word	0x40003400
    1abc:	41012000 	.word	0x41012000
    1ac0:	41014000 	.word	0x41014000
    1ac4:	43000000 	.word	0x43000000
    1ac8:	43000400 	.word	0x43000400
    1acc:	43000800 	.word	0x43000800
    1ad0:	43000c00 	.word	0x43000c00

00001ad4 <_usarts>:
    1ad4:	00000002 40100004 00030000 00700002     .......@......p.
    1ae4:	0000d8ad 00000000                       ........

00001aec <_i2cms>:
    1aec:	00000003 00200014 00000100 00000908     ...... .........
    1afc:	00d70001 00b71b00                       ........

00001b04 <_i2css>:
	...

00001b14 <sercomspi_regs>:
	...
    1b28:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    1b38:	65735f6c 6d6f6372 0000632e 752f2e2e     l_sercom.c..../u
    1b48:	5f726573 2f637273 76697264 2f737265     ser_src/drivers/
    1b58:	2f637273 2e433249 00000063              src/I2C.c...

00001b64 <_global_impure_ptr>:
    1b64:	20000004                                ... 

00001b68 <__sf_fake_stderr>:
	...

00001b88 <__sf_fake_stdin>:
	...

00001ba8 <__sf_fake_stdout>:
	...

00001bc8 <_init>:
    1bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bca:	bf00      	nop
    1bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1bce:	bc08      	pop	{r3}
    1bd0:	469e      	mov	lr, r3
    1bd2:	4770      	bx	lr

00001bd4 <__init_array_start>:
    1bd4:	00000289 	.word	0x00000289

00001bd8 <_fini>:
    1bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bda:	bf00      	nop
    1bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1bde:	bc08      	pop	{r3}
    1be0:	469e      	mov	lr, r3
    1be2:	4770      	bx	lr

00001be4 <__fini_array_start>:
    1be4:	00000265 	.word	0x00000265
